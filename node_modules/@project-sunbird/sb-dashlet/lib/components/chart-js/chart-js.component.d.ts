import { OnDestroy } from '@angular/core';
import { BaseChartDirective } from 'ng2-charts';
import { InputParams, IReportType, IChart, StringObject, IDataService } from '../../types/index';
import { BaseComponent } from '../base/base.component';
import { IChartOptions, ChartType, UpdateInputParams } from '../../types/index';
import * as i0 from "@angular/core";
/**
 * @dynamic
 */
export declare class ChartJsComponent extends BaseComponent implements IChart, OnDestroy {
    protected dataService: IDataService;
    private CONSTANTS;
    baseChartDirective: BaseChartDirective;
    readonly reportType: IReportType;
    _defaultConfig: Partial<IChartOptions>;
    config: Partial<IChartOptions>;
    type: ChartType;
    inputParameters: Partial<IChartOptions>;
    _labelsAndDatasetsClosure: any;
    exportOptions: string[];
    barChartPlugins: any[];
    constructor(dataService: IDataService, defaultConfig: object, CONSTANTS: StringObject);
    /**
     * @description initializes the component with the passed config and data
     * @param {InputParams} { config, type, data }
     * @return {*}  {Promise<any>}
     * @memberof ChartJsComponent
     */
    initialize({ config, type, data }: InputParams): Promise<any>;
    /**
     * @description It's a high order function responsible for getting labels and datasets, addition and removal of data.
     * @private
     * @param {string} labelExpr
     * @param {IDataset[]} datasets
     * @return {*}
     * @memberof ChartJsComponent
     */
    private getLabelsAndDatasetsClosure;
    /**
     * @description prepared the chart data using the configuration passed
     * @param {Partial<IChartOptions>} config
     * @param {*} data
     * @memberof ChartJsComponent
     */
    builder(config: Partial<IChartOptions>, data: any): void;
    private setChartData;
    reset(): void;
    destroy(): void;
    ngOnDestroy(): void;
    /**
     * @description updates the type, data or Dashlet configuration
     * @param {InputParams} input
     * @memberof ChartJsComponent
     */
    update(input: Partial<UpdateInputParams>): void;
    addData(data: object[] | object): void;
    refreshChart(): void;
    /**
     * @description Removes data associated with a label
     * @param {string} label
     * @memberof ChartJsComponent
     */
    removeData(label: string): void;
    getTelemetry(): void;
    getCurrentSelection(): void;
    getDatasetAtIndex(index: number): void;
    onChartClicked(event: any): void;
    onChartHovered(event: any): void;
    exportAsImage(format?: string): void;
    exportAs(format: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ChartJsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ChartJsComponent, "sb-chart-js", never, {}, {}, never, never, false>;
}
//# sourceMappingURL=chart-js.component.d.ts.map
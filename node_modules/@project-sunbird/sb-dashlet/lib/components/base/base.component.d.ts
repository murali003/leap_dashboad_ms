import { EventEmitter, TemplateRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { InputParams, IBase, IData, ReportState, IReportType, UpdateInputParams, CustomEvent, IDataService } from '../../types/index';
export declare abstract class BaseComponent implements Partial<IBase> {
    protected dataService: IDataService;
    constructor(dataService: IDataService);
    id: string;
    templateRefs: Record<string, TemplateRef<any>>;
    $context: any;
    data: any[];
    protected _isInitialized: boolean;
    state: EventEmitter<ReportState>;
    events: EventEmitter<CustomEvent>;
    eventsSubject: Subject<void>;
    abstract inputParameters: any;
    abstract reportType: IReportType;
    abstract config: object;
    abstract _defaultConfig: object;
    abstract exportOptions: string[];
    abstract initialize(config: InputParams): Promise<any>;
    abstract builder(config: any, data: any): void;
    abstract reset(): void;
    abstract destroy(): void;
    abstract update(config: UpdateInputParams): any;
    abstract addData(data: object): any;
    abstract exportAs(format: string): any;
    fetchData(config: IData): Observable<any[]>;
    getConfigValue(key: string): any;
    protected checkIfInitialized(): never | void;
    protected _downloadFile(url: any, filename: any): void;
    getCsv(data: any, options: any): Promise<unknown>;
    exportAsCsv(data?: object[], options?: Record<string, any>): Promise<void>;
    sortAndTransformData(rows: object[], { columnsToPick }: {
        columnsToPick: string[];
    }): any[];
}
//# sourceMappingURL=base.component.d.ts.map
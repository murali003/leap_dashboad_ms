import { ElementRef } from '@angular/core';
import { IReportType, InputParams, ChartType, UpdateInputParams, StringObject, IDataService } from '../../types/index';
import { BaseComponent } from '../base/base.component';
import * as i0 from "@angular/core";
/**
 * @dynamic
 */
export declare class MapComponent extends BaseComponent {
    protected dataService: IDataService;
    private CONSTANTS;
    config: any;
    reportType: IReportType;
    type: ChartType;
    _defaultConfig: object;
    inputParameters: object;
    exportOptions: string[];
    private mappingConfig;
    private getGeoJSON;
    private mapClosure;
    set mapContainer(element: ElementRef | null);
    constructor(dataService: IDataService, defaultConfig: object, CONSTANTS: StringObject);
    initialize({ config, data, type }: InputParams): Promise<any>;
    private _setMapOptions;
    private _mapClosure;
    builder(config: any, _: any): Promise<void>;
    reset(): void;
    destroy(): void;
    update(input: Partial<UpdateInputParams>): void;
    addData(data: object | object[]): void;
    refreshChart(): void;
    getTelemetry(): void;
    exportAs(format: string): void;
    /**
     * @description click handler for a specfic layer within the map
     * @private
     * @param {*} { properties, metaData }
     * @param {*} event
     * @memberof Map2Component
     */
    private clickHandler;
    /**
     * @description handles mouse out event for a specific layer
     * @private
     * @param {*} { properties, metaData }
     * @param {*} event
     * @memberof Map2Component
     */
    private mouseoutHandler;
    /**
     * @description mouseover event handler
     * @private
     * @param {*} { properties, metaData }
     * @param {*} event
     * @memberof Map2Component
     */
    private mouseoverHandler;
    /**
     * @description attaches event handlers on each layer
     * @private
     * @param {*} feature
     * @param {*} layer
     * @memberof Map2Component
     */
    private onEachFeature;
    private getControlObject;
    /**
     * @description sets styles for each feature layer
     * @private
     * @param {*} feature
     * @returns
     * @memberof MapComponent
     */
    private setStyle;
    /**
   * @description dynamically add custom properties from external JSON to feature Objects
   * @private
   * @param {*} { reportData = [], layers = [], labelExpr = 'District', type = 'district', features = [], metrics = [] }
   * @returns
   * @memberof MapComponent
   */
    private addProperties;
    private findRecordInConfigMapping;
    private getGeoJSONFile;
    static ɵfac: i0.ɵɵFactoryDeclaration<MapComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MapComponent, "sb-map", never, {}, {}, never, never, false>;
}
//# sourceMappingURL=map.component.d.ts.map
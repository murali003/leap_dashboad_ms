import { OnInit, EventEmitter, OnDestroy, ElementRef } from '@angular/core';
import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { Subject, Observable } from 'rxjs';
import { IFilterConfig } from '../../types/index';
import * as i0 from "@angular/core";
interface AdditionalConfig {
    options?: string[];
    minDate?: any;
    maxData?: any;
    dropdownSettings: object;
    dateFormat: string;
}
export declare type IFilterConfiguration = IFilterConfig & AdditionalConfig;
export declare class FiltersComponent implements OnInit, OnDestroy {
    private fb;
    private defaultConfig;
    config: IFilterConfig[];
    data: any;
    filteredData: EventEmitter<any>;
    resetFilters: Observable<void>;
    private _data;
    filtersFormGroup: UntypedFormGroup;
    filters: IFilterConfiguration[];
    unsubscribe$: Subject<void>;
    ranges: any;
    locale: {
        applyLabel: string;
        format: string;
    };
    dropdownSettings: any;
    datepicker: ElementRef;
    constructor(fb: UntypedFormBuilder, defaultConfig: any);
    ngOnInit(): void;
    private _setDropdownSettings;
    private _getFilterOptions;
    init(config: IFilterConfig[], data: object[]): void;
    private _omitEmptyFilters;
    private transformFilterValues;
    private getSelectedFiltersObservable;
    handleFilterValueChanges(): void;
    filterDataBySelectedFilters(JSON: any): (selectedFilters: any) => any;
    ngOnDestroy(): void;
    updateDateRange({ startDate, endDate }: {
        startDate: any;
        endDate: any;
    }, columnRef: any, dateFormat: any): void;
    reset(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FiltersComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FiltersComponent, "sb-dashlets-filters", never, { "config": "config"; "data": "data"; "resetFilters": "resetFilters"; }, { "filteredData": "filteredData"; }, never, never, false>;
}
export {};
//# sourceMappingURL=filters.component.d.ts.map
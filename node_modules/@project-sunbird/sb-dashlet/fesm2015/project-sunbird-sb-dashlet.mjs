import { __awaiter, __rest, __decorate, __param } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, EventEmitter, Inject, Component, Input, Output, ViewChild, Directive, ContentChildren, Injectable, NgModule } from '@angular/core';
import { Subject, of, zip, BehaviorSubject, throwError } from 'rxjs';
import { tap, takeUntil, debounceTime, distinctUntilChanged, map, startWith, pairwise, skipWhile, switchMap, catchError, pluck, retry } from 'rxjs/operators';
import * as jsonexport from 'jsonexport/dist';
import * as _ from 'lodash-es';
import { pick, groupBy, get, mapValues, sumBy, remove, toNumber, minBy, maxBy, sortBy, omitBy, map as map$1, cloneDeep, toLower, reduce, omit, find } from 'lodash-es';
import * as i1$2 from 'ng2-charts';
import { ThemeService, BaseChartDirective, ChartsModule } from 'ng2-charts';
import * as pluginAnnotation from 'chartjs-plugin-annotation';
import * as i1$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat';
import * as i1 from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';
import * as i3 from 'ng-multiselect-dropdown';
import { NgMultiSelectDropDownModule } from 'ng-multiselect-dropdown';
import * as i4 from 'ngx-daterangepicker-material';
import { NgxDaterangepickerMd } from 'ngx-daterangepicker-material';
import { v4 } from 'uuid';
import Joi from 'joi';
import * as i2 from 'angular-datatables';
import { DataTableDirective, DataTablesModule } from 'angular-datatables';
import * as i1$3 from '@angular/common/http';
import { HttpClientModule } from '@angular/common/http';

var ChartType;
(function (ChartType) {
    ChartType["BAR"] = "bar";
    ChartType["LINE"] = "line";
    ChartType["PIE"] = "pie";
    ChartType["DOUGHNUT"] = "doughnut";
    ChartType["POLAR"] = "polar";
    ChartType["RADAR"] = "radar";
    ChartType["BUBBLE"] = "bubble";
    ChartType["SCATTER"] = "scatter";
    ChartType["AREA"] = "area";
    ChartType["VERTICAL_BAR"] = "verticalBar";
    ChartType["BIG_NUMBER"] = "bigNumber";
    ChartType["MAP"] = "map";
    ChartType["HORIZONTAL_Bar"] = "horizontalBar";
})(ChartType || (ChartType = {}));

var GeometryType;
(function (GeometryType) {
    GeometryType["Polygon"] = "Polygon";
})(GeometryType || (GeometryType = {}));
var FeatureType;
(function (FeatureType) {
    FeatureType["Feature"] = "Feature";
})(FeatureType || (FeatureType = {}));

var IReportType;
(function (IReportType) {
    IReportType["CHART"] = "chart";
    IReportType["TABLE"] = "table";
})(IReportType || (IReportType = {}));
var ReportState;
(function (ReportState) {
    ReportState["PENDING"] = "pending";
    ReportState["DONE"] = "done";
})(ReportState || (ReportState = {}));

var TableType;
(function (TableType) {
    TableType["TABLE"] = "table";
})(TableType || (TableType = {}));

const DASHLET_CONSTANTS = new InjectionToken('CONSTANTS', {
    factory() {
        return constants;
    }
});
const constants = {
    INVALID_INPUT: "invalid input",
    METHOD_NOT_IMPLEMENTED: "Method not implemented",
    CHART_NOT_INITIALIZED: "Chart is not initialized"
};

const DEFAULT_CONFIG = new InjectionToken('DEFAULT_CONFIG');

const DATA_SERVICE = new InjectionToken('DATA_SERVICE');

const jsonExport$1 = jsonexport;
let BaseComponent = class BaseComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.data = [];
        this._isInitialized = false;
        this.state = new EventEmitter();
        this.events = new EventEmitter();
        this.eventsSubject = new Subject();
    }
    fetchData(config) {
        const { values = null, location: { url = null, options = {}, method = 'GET' } = {} } = config || {};
        if (values)
            return of(values);
        if (!url)
            throw new Error('invalid input');
        this.state.emit(ReportState.PENDING);
        return this.dataService.fetchData({ method, url, options }).pipe(tap(_ => this.state.emit(ReportState.DONE)));
    }
    getConfigValue(key) {
        return this.config && this.config[key];
    }
    checkIfInitialized() {
        if (!this._isInitialized) {
            throw Error(constants.CHART_NOT_INITIALIZED);
        }
    }
    _downloadFile(url, filename) {
        var link = document.createElement("a");
        link.setAttribute("href", url);
        link.setAttribute("download", filename);
        link.click();
    }
    getCsv(data, options) {
        return new Promise((resolve, reject) => {
            jsonExport$1(data, options, (error, csv) => {
                if (!error && csv) {
                    resolve(csv);
                }
                else {
                    reject(error);
                }
            });
        });
    }
    exportAsCsv(data, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const _a = options || {}, { columnsToPick = [] } = _a, others = __rest(_a, ["columnsToPick"]);
            const JSON = this.sortAndTransformData(data || this.data, { columnsToPick });
            try {
                const csv = yield this.getCsv(JSON, others);
                var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
                var url = URL.createObjectURL(blob);
                this._downloadFile(url, 'data.csv');
            }
            catch (error) {
                console.log(error);
            }
        });
    }
    sortAndTransformData(rows, { columnsToPick = [] }) {
        if (!columnsToPick.length)
            return rows;
        return rows.map(row => {
            const defaultValue = columnsToPick.reduce((acc, val) => {
                acc[val] = undefined;
                return acc;
            }, {});
            return pick(Object.assign(Object.assign({}, defaultValue), row), columnsToPick);
        });
    }
};
BaseComponent = __decorate([
    __param(0, Inject(DATA_SERVICE))
], BaseComponent);

const CHART_DEFAULT_CONFIG = {
    labels: [],
    datasets: [],
    legend: true,
    options: {},
    colors: []
};

const FILTER_DEFAULT_CONFIG = {
    config: {
        controlType: 'multi-select',
        searchable: true,
        default: [],
        placeholder: 'Select Option',
        options: [],
        dateFormat: 'DD-MM-YYYY'
    },
    dropdownSettings: {
        singleSelection: false,
        idField: 'item_id',
        textField: 'item_text',
        selectAllText: 'Select All',
        unSelectAllText: 'UnSelect All',
        itemsShowLimit: 3,
        allowSearchFilter: true
    }
};

dayjs.extend(customParseFormat);
const ranges = {
    'Today': [dayjs(), dayjs()],
    'Yesterday': [dayjs().subtract(1, 'day'), dayjs().subtract(1, 'day')],
    'Last 7 Days': [dayjs().subtract(6, 'day'), dayjs()],
    'Last 30 Days': [dayjs().subtract(29, 'day'), dayjs()],
    'This Month': [dayjs().startOf('month'), dayjs().endOf('month')],
    'Last Month': [dayjs().subtract(1, 'month').startOf('month'), dayjs().subtract(1, 'month').endOf('month')]
};
const sortDates = (dates, format = 'DD-MM-YYYY') => {
    return dates.sort((pre, next) => {
        const preDate = dayjs(pre, format), nextDate = dayjs(next, format);
        if (preDate.isSame(nextDate))
            return 0;
        if (preDate.isBefore(nextDate))
            return -1;
        return 1;
    });
};
class FiltersComponent {
    constructor(fb, defaultConfig) {
        this.fb = fb;
        this.defaultConfig = defaultConfig;
        this.config = [];
        this.filteredData = new EventEmitter();
        this.unsubscribe$ = new Subject();
        this.ranges = ranges;
        this.locale = { applyLabel: 'Set Date', format: 'DD-MM-YYYY' };
        this._omitEmptyFilters = filters => _.omitBy(filters, _.isEmpty);
        this.transformFilterValues = filters => _.mapValues(filters, values => Array.isArray(values) ? values : [values]);
        this.getSelectedFiltersObservable = () => {
            return this.filtersFormGroup.valueChanges
                .pipe(takeUntil(this.unsubscribe$), debounceTime(1000), distinctUntilChanged(), map(this._omitEmptyFilters.bind(this)), map(this.transformFilterValues.bind(this)), startWith({}), pairwise());
        };
    }
    ngOnInit() {
        this._data = this.data;
        this.init(this.config, this._data);
        this.handleFilterValueChanges();
        this.resetFilters.subscribe(() => {
            this.filtersFormGroup.reset();
        });
    }
    _setDropdownSettings(config = {}) {
        return Object.assign(Object.assign({}, this.defaultConfig.dropdownSettings), config);
    }
    _getFilterOptions(dataExpr, data) {
        const getFilterValue = dataExpr => row => (row && row[dataExpr]) || '';
        const inputDataArr = (data && Array.isArray(data) && data.map(getFilterValue(dataExpr))) || [];
        return _.compact(_.sortBy(_.uniq(inputDataArr)));
    }
    init(config, data) {
        this.filters = [];
        this.filtersFormGroup = this.fb.group({});
        config.forEach(filter => {
            const filterObj = Object.assign(Object.assign({}, this.defaultConfig.config), filter);
            const { reference, default: defaultValue, searchable, controlType, dropdownSettings = {}, dateFormat } = filterObj;
            const options = this._getFilterOptions(reference, data);
            if (filter.controlType === 'date' || /date/i.test(reference)) {
                const sortedDateRange = sortDates([...options], dateFormat);
                filterObj['minDate'] = dayjs(sortedDateRange[0], dateFormat);
                filterObj['maxDate'] = dayjs(sortedDateRange[sortedDateRange.length - 1], dateFormat);
            }
            else {
                filterObj['dropdownSettings'] = this._setDropdownSettings(Object.assign({ singleSelection: controlType === 'single-select' ? true : false, allowSearchFilter: searchable }, dropdownSettings));
            }
            filterObj.options = options;
            this.filtersFormGroup.addControl(reference, this.fb.control(defaultValue));
            this.filters.push(filterObj);
        });
    }
    handleFilterValueChanges() {
        const selectedFilters$ = this.getSelectedFiltersObservable();
        const filteredData$ = selectedFilters$.pipe(tap(console.log), map(([_, currentFilters]) => currentFilters), map(this.filterDataBySelectedFilters(this._data)));
        zip(selectedFilters$, filteredData$)
            .subscribe(([[previousFilters, currentFilters], filteredData]) => {
            _.forEach(this.filters, filter => {
                const { reference } = filter;
                const options = this._getFilterOptions(reference, filteredData);
                const referenceExistsInPreviousFilters = reference in previousFilters;
                const referenceExistsInCurrentFilters = reference in currentFilters;
                if (!referenceExistsInCurrentFilters || (referenceExistsInPreviousFilters && JSON.stringify(previousFilters[reference]) === JSON.stringify(currentFilters[reference]))) {
                    filter.options = options;
                    if (filter.controlType === 'date' || /date/i.test(reference)) {
                        const sortedDateRange = sortDates([...options], 'DD-MM-YYYY');
                        filter['minDate'] = dayjs(sortedDateRange[0], 'DD-MM-YYYY');
                        filter['maxDate'] = dayjs(sortedDateRange[sortedDateRange.length - 1], 'DD-MM-YYYY');
                    }
                }
            });
            this.filteredData.emit(filteredData);
        });
    }
    filterDataBySelectedFilters(JSON) {
        return selectedFilters => _.filter(JSON, data => {
            return _.every(selectedFilters, (values, key) => {
                if (data[key]) {
                    return _.some(values, value => _.trim(_.toLower(value)) === _.trim(_.toLower(data[key])));
                }
                return false;
            });
        });
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    updateDateRange({ startDate, endDate }, columnRef, dateFormat) {
        const selectedStartDate = dayjs(startDate).subtract(1, 'day');
        const selectedEndDate = dayjs(endDate).add(1, 'day');
        const dateRange = [];
        let currDate = dayjs(selectedStartDate).startOf('day');
        const lastDate = dayjs(selectedEndDate).startOf('day');
        while (currDate.diff(lastDate) < 0) {
            dateRange.push(currDate.clone().format(dateFormat));
            currDate = currDate.add(1, 'day');
        }
        this.filtersFormGroup.get(columnRef).setValue(dateRange);
    }
    reset() {
        this.filtersFormGroup.reset();
        if (this.datepicker) {
            this.datepicker.nativeElement.value = '';
        }
    }
}
FiltersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: FiltersComponent, deps: [{ token: i1.UntypedFormBuilder }, { token: DEFAULT_CONFIG }], target: i0.ɵɵFactoryTarget.Component });
FiltersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: FiltersComponent, selector: "sb-dashlets-filters", inputs: { config: "config", data: "data", resetFilters: "resetFilters" }, outputs: { filteredData: "filteredData" }, providers: [{
            provide: DEFAULT_CONFIG,
            useValue: FILTER_DEFAULT_CONFIG
        }], viewQueries: [{ propertyName: "datepicker", first: true, predicate: ["datePickerForFilters"], descendants: true }], ngImport: i0, template: "\n<ng-container *ngIf=\"filters?.length && filtersFormGroup\">\n    <form [formGroup]=\"filtersFormGroup\">\n        <div class=\"sb-filter-g\">\n                <ng-container *ngFor=\"let filter of filters\">\n                    <ng-container\n                        *ngIf=\"filter?.controlType === 'multi-select' || filter?.controlType === 'single-select'\">\n                        <ng-multiselect-dropdown class=\"sb-filter-g__item\"\n                            [placeholder]=\"filter?.placeholder || filter?.displayName || filter?.label\"\n                            [settings]=\"filter?.dropdownSettings\" [data]=\"filter?.options\"\n                            [formControlName]=\"filter.reference\">\n                        </ng-multiselect-dropdown>\n                    </ng-container>\n                    <ng-container *ngIf=\"filter?.controlType === 'date'\">\n                        <div class=\"sb-filter-g__item\">\n                            <input type=\"text\"\n                                [placeholder]=\"filter?.placeholder || filter?.displayName || filter?.label\"\n                                ngxDaterangepickerMd [minDate]=\"filter?.minDate\" [maxDate]=\"filter?.maxDate\"\n                                [ranges]=\"ranges\" [alwaysShowCalendars]=\"true\" [locale]=\"locale\"\n                                [linkedCalendars]=\"true\" [showCustomRangeLabel]=\"true\"\n                                (change)=\"updateDateRange($event,filter.reference, filter?.dateFormat)\"\n                                #datePickerForFilters />\n                        </div>\n                    </ng-container>\n                </ng-container>\n        </div>\n    </form>\n</ng-container>", styles: [".sb-filter-g{display:grid;grid-template-columns:repeat(auto-fill,minmax(250px,1fr));gap:.5rem}.sb-filter-g__item{margin-bottom:.5rem;display:block;--white: #fff;background-color:var(--white)}.sb-filter-g__item input{width:100%;border:1px solid #adadad;height:35px;border-radius:.25rem;padding-left:.75rem;color:#333}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i3.MultiSelectComponent, selector: "ng-multiselect-dropdown", inputs: ["disabled", "placeholder", "settings", "data"], outputs: ["onFilterChange", "onDropDownClose", "onSelect", "onDeSelect", "onSelectAll", "onDeSelectAll"] }, { kind: "directive", type: i4.DaterangepickerDirective, selector: "input[ngxDaterangepickerMd]", inputs: ["minDate", "maxDate", "autoApply", "alwaysShowCalendars", "showCustomRangeLabel", "linkedCalendars", "dateLimit", "singleDatePicker", "showWeekNumbers", "showISOWeekNumbers", "showDropdowns", "isInvalidDate", "isCustomDate", "isTooltipDate", "showClearButton", "customRangeDirection", "ranges", "opens", "drops", "firstMonthDayClass", "lastMonthDayClass", "emptyWeekRowClass", "emptyWeekColumnClass", "firstDayOfNextMonthClass", "lastDayOfPreviousMonthClass", "keepCalendarOpeningWithRange", "showRangeLabelOnInput", "showCancel", "lockStartDate", "timePicker", "timePicker24Hour", "timePickerIncrement", "timePickerSeconds", "closeOnAutoApply", "endKeyHolder", "startKey", "locale", "endKey"], outputs: ["change", "rangeClicked", "datesUpdated", "startDateChanged", "endDateChanged", "clearClicked"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: FiltersComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sb-dashlets-filters', providers: [{
                            provide: DEFAULT_CONFIG,
                            useValue: FILTER_DEFAULT_CONFIG
                        }], template: "\n<ng-container *ngIf=\"filters?.length && filtersFormGroup\">\n    <form [formGroup]=\"filtersFormGroup\">\n        <div class=\"sb-filter-g\">\n                <ng-container *ngFor=\"let filter of filters\">\n                    <ng-container\n                        *ngIf=\"filter?.controlType === 'multi-select' || filter?.controlType === 'single-select'\">\n                        <ng-multiselect-dropdown class=\"sb-filter-g__item\"\n                            [placeholder]=\"filter?.placeholder || filter?.displayName || filter?.label\"\n                            [settings]=\"filter?.dropdownSettings\" [data]=\"filter?.options\"\n                            [formControlName]=\"filter.reference\">\n                        </ng-multiselect-dropdown>\n                    </ng-container>\n                    <ng-container *ngIf=\"filter?.controlType === 'date'\">\n                        <div class=\"sb-filter-g__item\">\n                            <input type=\"text\"\n                                [placeholder]=\"filter?.placeholder || filter?.displayName || filter?.label\"\n                                ngxDaterangepickerMd [minDate]=\"filter?.minDate\" [maxDate]=\"filter?.maxDate\"\n                                [ranges]=\"ranges\" [alwaysShowCalendars]=\"true\" [locale]=\"locale\"\n                                [linkedCalendars]=\"true\" [showCustomRangeLabel]=\"true\"\n                                (change)=\"updateDateRange($event,filter.reference, filter?.dateFormat)\"\n                                #datePickerForFilters />\n                        </div>\n                    </ng-container>\n                </ng-container>\n        </div>\n    </form>\n</ng-container>", styles: [".sb-filter-g{display:grid;grid-template-columns:repeat(auto-fill,minmax(250px,1fr));gap:.5rem}.sb-filter-g__item{margin-bottom:.5rem;display:block;--white: #fff;background-color:var(--white)}.sb-filter-g__item input{width:100%;border:1px solid #adadad;height:35px;border-radius:.25rem;padding-left:.75rem;color:#333}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i1.UntypedFormBuilder }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DEFAULT_CONFIG]
                    }] }];
    }, propDecorators: { config: [{
                type: Input
            }], data: [{
                type: Input
            }], filteredData: [{
                type: Output
            }], resetFilters: [{
                type: Input
            }], datepicker: [{
                type: ViewChild,
                args: ['datePickerForFilters']
            }] } });

/**
 * @dynamic
 */
class ChartJsComponent extends BaseComponent {
    constructor(dataService, defaultConfig, CONSTANTS) {
        super(dataService);
        this.dataService = dataService;
        this.CONSTANTS = CONSTANTS;
        this.reportType = IReportType.CHART;
        this.inputParameters = {};
        this.exportOptions = ['png', 'csv', 'jpg'];
        this.barChartPlugins = [pluginAnnotation];
        this._defaultConfig = defaultConfig;
    }
    /**
     * @description initializes the component with the passed config and data
     * @param {InputParams} { config, type, data }
     * @return {*}  {Promise<any>}
     * @memberof ChartJsComponent
     */
    initialize({ config, type, data }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(config && type && data))
                throw new SyntaxError(this.CONSTANTS.INVALID_INPUT);
            this.config = config = Object.assign(Object.assign({}, config), { type });
            const fetchedJSON = this.data = yield this.fetchData(data).toPromise().catch(err => []);
            this.builder(config, fetchedJSON);
            this._isInitialized = true;
            this.state.emit(ReportState.DONE);
        });
    }
    /**
     * @description It's a high order function responsible for getting labels and datasets, addition and removal of data.
     * @private
     * @param {string} labelExpr
     * @param {IDataset[]} datasets
     * @return {*}
     * @memberof ChartJsComponent
     */
    getLabelsAndDatasetsClosure(labelExpr, datasets) {
        return (data) => {
            const getDataGroupedByLabelExpr = data => groupBy(data, val => {
                const value = get(val, labelExpr);
                return value && typeof value === 'string' ? value.trim() : '';
            });
            const getLabels = (data) => Object.keys(data);
            const getDatasets = (data) => datasets.map(dataset => {
                return Object.assign(Object.assign({}, dataset), (dataset.dataExpr && {
                    data: Object.values(mapValues(data, rows => sumBy(rows, row => +(row[dataset.dataExpr] || 0))))
                }));
            });
            const findDataByLabelPredicate = (label) => (row) => row[labelExpr] === label;
            return {
                addData(newData) {
                    data = data.concat(newData);
                    return this.getData(data);
                },
                getData(overriddenData) {
                    data = overriddenData || data;
                    const groupedData = getDataGroupedByLabelExpr(data);
                    return {
                        labels: getLabels(groupedData),
                        datasets: getDatasets(groupedData)
                    };
                },
                removeData(label) {
                    remove(data, findDataByLabelPredicate(label));
                    return this.getData(data);
                }
            };
        };
    }
    /**
     * @description prepared the chart data using the configuration passed
     * @param {Partial<IChartOptions>} config
     * @param {*} data
     * @memberof ChartJsComponent
     */
    builder(config, data) {
        let { labels = [], labelExpr = null, type = null, legend = true, colors = [], datasets = [], options = {} } = config, others = __rest(config, ["labels", "labelExpr", "type", "legend", "colors", "datasets", "options"]);
        options = Object.assign(Object.assign({}, others), options);
        if (labelExpr) {
            this._labelsAndDatasetsClosure = this.getLabelsAndDatasetsClosure(labelExpr, datasets)(data);
            const { getData } = this._labelsAndDatasetsClosure;
            ({ labels, datasets } = getData());
        }
        else {
            datasets = datasets.map(dataset => {
                dataset.data = data.map(rec => rec[dataset.dataExpr]);
                return dataset;
            });
        }
        this.setChartData({ labels, datasets, options, type, legend, colors });
    }
    setChartData(config = {}) {
        this.inputParameters = Object.assign(Object.assign(Object.assign({}, this._defaultConfig), this.inputParameters), config);
        this.$context = { data: this.data, config: this.config, inputParameters: this.inputParameters, exportOptions: this.exportOptions };
    }
    reset() {
        this.eventsSubject.next();
    }
    destroy() {
        get(this.baseChartDirective, 'chart.destroy') && this.baseChartDirective.chart.destroy();
    }
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @description updates the type, data or Dashlet configuration
     * @param {InputParams} input
     * @memberof ChartJsComponent
     */
    update(input) {
        this.checkIfInitialized();
        if (!input)
            throw new Error(this.CONSTANTS.INVALID_INPUT);
        const { type = null, config = {}, data = null } = input;
        let labels, datasets;
        if (data) {
            const { labelExpr, datasets: datasetsConfig } = config;
            if (labelExpr || datasets) {
                this._labelsAndDatasetsClosure = this.getLabelsAndDatasetsClosure(labelExpr || this.getConfigValue(labelExpr), datasetsConfig || this.getConfigValue(datasets))(data);
            }
            ({ labels, datasets } = this._labelsAndDatasetsClosure.getData(data));
        }
        this.setChartData(Object.assign(Object.assign(Object.assign({}, config), (type && { type })), (labels && datasets && { labels, datasets })));
        get(this.baseChartDirective, 'update') && this.baseChartDirective.update();
    }
    addData(data) {
        this.checkIfInitialized();
        if (!data)
            throw new Error(this.CONSTANTS.INVALID_INPUT);
        if (this._labelsAndDatasetsClosure) {
            data = Array.isArray(data) ? data : [data];
            const { labels, datasets } = this._labelsAndDatasetsClosure.addData(data);
            this.setChartData({ labels, datasets });
        }
    }
    refreshChart() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    /**
     * @description Removes data associated with a label
     * @param {string} label
     * @memberof ChartJsComponent
     */
    removeData(label) {
        this.checkIfInitialized();
        const { labels, datasets } = this._labelsAndDatasetsClosure.removeData(label);
        this.setChartData({ labels, datasets });
    }
    getTelemetry() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    getCurrentSelection() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    getDatasetAtIndex(index) {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    onChartClicked(event) {
        this.events.emit({
            type: 'CLICK',
            event
        });
    }
    onChartHovered(event) {
        this.events.emit({
            type: 'HOVER',
            event
        });
    }
    exportAsImage(format = 'jpg') {
        const dataUrl = document.getElementById(this.id).toDataURL(`image/${format}`, 1);
        const fileName = `image.${format}`;
        this._downloadFile(dataUrl, fileName);
    }
    exportAs(format) {
        if (!this.exportOptions.includes(format)) {
            throw new Error('given type not supported');
        }
        switch (format) {
            case 'csv': {
                this.exportAsCsv();
                break;
            }
            default: {
                this.exportAsImage(format);
                break;
            }
        }
    }
}
ChartJsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ChartJsComponent, deps: [{ token: DATA_SERVICE }, { token: DEFAULT_CONFIG }, { token: DASHLET_CONSTANTS }], target: i0.ɵɵFactoryTarget.Component });
ChartJsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: ChartJsComponent, selector: "sb-chart-js", providers: [
        ThemeService,
        {
            provide: DEFAULT_CONFIG,
            useValue: CHART_DEFAULT_CONFIG
        }
    ], viewQueries: [{ propertyName: "baseChartDirective", first: true, predicate: BaseChartDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultFilterTemplate let-context>\n  <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n    (filteredData)=\"update({data: $event})\" [resetFilters]=\"eventsSubject.asObservable()\">\n  </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<div *ngIf=\"$context?.inputParameters as data\">\n  <canvas [id]=\"id\" baseChart [width]=\"data.options.width ? data.options.width : '400'\" [height]=\"data.options.height ? data.options.height : '400'\" [datasets]=\"data?.datasets\" [labels]=\"data?.labels\"\n    [options]=\"data?.options\" [colors]=\"data?.colors\" [legend]=\"data?.legend\" [chartType]=\"data?.type\" [plugins]=\"barChartPlugins\"\n    (chartClick)=\"onChartClicked($event)\" (chartHover)=\"onChartHovered($event)\"></canvas>\n</div>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>", styles: [""], dependencies: [{ kind: "directive", type: i1$2.BaseChartDirective, selector: "canvas[baseChart]", inputs: ["options", "data", "datasets", "labels", "chartType", "colors", "legend", "plugins"], outputs: ["chartClick", "chartHover"], exportAs: ["base-chart"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: FiltersComponent, selector: "sb-dashlets-filters", inputs: ["config", "data", "resetFilters"], outputs: ["filteredData"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ChartJsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sb-chart-js', providers: [
                        ThemeService,
                        {
                            provide: DEFAULT_CONFIG,
                            useValue: CHART_DEFAULT_CONFIG
                        }
                    ], template: "<ng-template #defaultFilterTemplate let-context>\n  <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n    (filteredData)=\"update({data: $event})\" [resetFilters]=\"eventsSubject.asObservable()\">\n  </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<div *ngIf=\"$context?.inputParameters as data\">\n  <canvas [id]=\"id\" baseChart [width]=\"data.options.width ? data.options.width : '400'\" [height]=\"data.options.height ? data.options.height : '400'\" [datasets]=\"data?.datasets\" [labels]=\"data?.labels\"\n    [options]=\"data?.options\" [colors]=\"data?.colors\" [legend]=\"data?.legend\" [chartType]=\"data?.type\" [plugins]=\"barChartPlugins\"\n    (chartClick)=\"onChartClicked($event)\" (chartHover)=\"onChartHovered($event)\"></canvas>\n</div>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>" }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Inject,
                        args: [DATA_SERVICE]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DEFAULT_CONFIG]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DASHLET_CONSTANTS]
                    }] }];
    }, propDecorators: { baseChartDirective: [{
                type: ViewChild,
                args: [BaseChartDirective]
            }] } });

var chartJs_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ChartJsComponent: ChartJsComponent
});

class ReportWrapperDirective {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
}
ReportWrapperDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ReportWrapperDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
ReportWrapperDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: ReportWrapperDirective, selector: "[sbReportWrapper]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ReportWrapperDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[sbReportWrapper]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });

class TemplateRefsDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
TemplateRefsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TemplateRefsDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TemplateRefsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: TemplateRefsDirective, selector: "[sbTemplateRef]", inputs: { slot: ["sbTemplateRef", "slot"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TemplateRefsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[sbTemplateRef]'
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { slot: [{
                type: Input,
                args: ['sbTemplateRef']
            }] } });

const TYPE_TO_COMPONENT_MAPPING = {
    [ChartType.LINE]: {
        componentPath: Promise.resolve().then(function () { return chartJs_component; }).then(module => module.ChartJsComponent),
        schemaPath: Promise.resolve().then(function () { return schema$7; }).then(module => module.schema)
    },
    [ChartType.BAR]: {
        componentPath: Promise.resolve().then(function () { return chartJs_component; }).then(module => module.ChartJsComponent),
        schemaPath: Promise.resolve().then(function () { return schema$7; }).then(module => module.schema)
    },
    [ChartType.PIE]: {
        componentPath: Promise.resolve().then(function () { return chartJs_component; }).then(module => module.ChartJsComponent),
        schemaPath: Promise.resolve().then(function () { return schema$7; }).then(module => module.schema)
    },
    [ChartType.AREA]: {
        componentPath: Promise.resolve().then(function () { return chartJs_component; }).then(module => module.ChartJsComponent),
        schemaPath: Promise.resolve().then(function () { return schema$7; }).then(module => module.schema)
    },
    [ChartType.BUBBLE]: {
        componentPath: Promise.resolve().then(function () { return chartJs_component; }).then(module => module.ChartJsComponent),
        schemaPath: Promise.resolve().then(function () { return schema$7; }).then(module => module.schema)
    },
    [ChartType.DOUGHNUT]: {
        componentPath: Promise.resolve().then(function () { return chartJs_component; }).then(module => module.ChartJsComponent),
        schemaPath: Promise.resolve().then(function () { return schema$7; }).then(module => module.schema)
    },
    [ChartType.POLAR]: {
        componentPath: Promise.resolve().then(function () { return chartJs_component; }).then(module => module.ChartJsComponent),
        schemaPath: Promise.resolve().then(function () { return schema$7; }).then(module => module.schema)
    },
    [ChartType.SCATTER]: {
        componentPath: Promise.resolve().then(function () { return chartJs_component; }).then(module => module.ChartJsComponent),
        schemaPath: Promise.resolve().then(function () { return schema$7; }).then(module => module.schema)
    },
    [ChartType.DOUGHNUT]: {
        componentPath: Promise.resolve().then(function () { return chartJs_component; }).then(module => module.ChartJsComponent),
        schemaPath: Promise.resolve().then(function () { return schema$7; }).then(module => module.schema)
    },
    [ChartType.BIG_NUMBER]: {
        componentPath: Promise.resolve().then(function () { return bigNumber_component; }).then(module => module.BigNumberComponent),
        schemaPath: Promise.resolve().then(function () { return schema$5; }).then(module => module.schema)
    },
    [TableType.TABLE]: {
        componentPath: Promise.resolve().then(function () { return dtTable_component; }).then(module => module.DtTableComponent),
        schemaPath: Promise.resolve().then(function () { return schema$3; }).then(module => module.schema)
    },
    [ChartType.MAP]: {
        componentPath: Promise.resolve().then(function () { return map_component; }).then(module => module.MapComponent),
        schemaPath: Promise.resolve().then(function () { return schema$1; }).then(module => module.schema)
    },
    [ChartType.HORIZONTAL_Bar]: {
        componentPath: Promise.resolve().then(function () { return chartJs_component; }).then(module => module.ChartJsComponent),
        schemaPath: Promise.resolve().then(function () { return schema$7; }).then(module => module.schema)
    },
};

const chartTypes = Object.keys(TYPE_TO_COMPONENT_MAPPING);
const getSchema = (config) => Joi.object({
    type: Joi.string().required().valid(...chartTypes),
    config: config.required(),
    data: Joi.object({
        values: Joi.array(),
        location: Joi.object({
            url: Joi.string().required(),
            method: Joi.string().required(),
            options: Joi.object({
                body: Joi.object().allow(...[null]).optional(),
                headers: Joi.object().pattern(Joi.string(), Joi.alternatives(...[Joi.string(), Joi.array().items(...[Joi.string()])])).optional(),
                params: Joi.object().pattern(Joi.string(), Joi.alternatives(...[Joi.string(), Joi.array().items(...[Joi.string()])])).optional(),
                responseType: Joi.string().valid(...['arraybuffer', 'blob', 'json', 'text']),
                reportProgress: Joi.boolean().optional(),
                response: Joi.object({
                    path: Joi.string()
                }).optional()
            }).optional().options({ allowUnknown: true })
        }),
        dataSchema: Joi.object().optional()
    }).required().xor("values", "location")
});
const defaultObjectSchemaAllowingAllKeys = Joi.object().options({ allowUnknown: true });
const validateInputAgainstSchema = (typeBasedConfigSchema) => (inputObject) => getSchema(typeBasedConfigSchema).validate(inputObject);

const transformTemplates = (result, current) => {
    result[current.slot] = current.templateRef;
    return result;
};
class DashletComponent {
    constructor(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.events = new EventEmitter();
        this._typeToComponentMapping = Object.freeze(TYPE_TO_COMPONENT_MAPPING);
    }
    get instance() {
        return this._componentInstance;
    }
    set instance(componentInstance) {
        this._componentInstance = componentInstance;
    }
    ngOnInit() {
        this.id = v4();
    }
    ngOnChanges(changes) {
        if (this.type && this.config && this.data) {
            this.loadComponent(this.type).catch(err => {
                console.error(err);
                throw err;
            });
        }
    }
    loadComponent(type) {
        return __awaiter(this, void 0, void 0, function* () {
            const componentResolver = this._typeToComponentMapping && this._typeToComponentMapping[type];
            if (!componentResolver) {
                throw new Error('Given Type not supported');
            }
            const { componentPath, schemaPath = Promise.resolve(defaultObjectSchemaAllowingAllKeys) } = componentResolver;
            const schema = yield schemaPath;
            const input = { data: this.data, config: this.config, type: this.type };
            const { error } = validateInputAgainstSchema(schema)(input);
            if (error) {
                throw new SyntaxError(error.message);
            }
            const component = yield componentPath;
            this.reportWrapper.viewContainerRef.clear();
            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
            const componentRef = this.reportWrapper.viewContainerRef.createComponent(componentFactory);
            const instance = this.instance = componentRef.instance;
            if (this.templateRefs.length) {
                instance['templateRefs'] = this.templateRefs.toArray().reduce(transformTemplates, {});
            }
            instance.id = this.id;
            instance.initialize({ config: this.config, type: this.type, data: this.data });
            instance.state.subscribe(this._stateEventsHandler.bind(this));
            instance.events.subscribe(this._eventsHandler.bind(this));
        });
    }
    _stateEventsHandler(event) {
        this.events.emit({ type: 'STATE', event });
    }
    _eventsHandler(event) {
        this.events.emit(event);
    }
    filter(filteredData) {
        this.instance.update({ data: filteredData });
    }
    reset() {
        this.instance.reset();
    }
}
DashletComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DashletComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });
DashletComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: DashletComponent, selector: "sb-dashlet", inputs: { type: "type", config: "config", data: "data" }, outputs: { events: "events" }, queries: [{ propertyName: "templateRefs", predicate: TemplateRefsDirective }], viewQueries: [{ propertyName: "reportWrapper", first: true, predicate: ReportWrapperDirective, descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div>\n    <ng-template sbReportWrapper></ng-template>\n</div>", styles: [""], dependencies: [{ kind: "directive", type: ReportWrapperDirective, selector: "[sbReportWrapper]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DashletComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sb-dashlet', template: "<div>\n    <ng-template sbReportWrapper></ng-template>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { type: [{
                type: Input
            }], config: [{
                type: Input
            }], data: [{
                type: Input
            }], events: [{
                type: Output
            }], reportWrapper: [{
                type: ViewChild,
                args: [ReportWrapperDirective, { static: true }]
            }], templateRefs: [{
                type: ContentChildren,
                args: [TemplateRefsDirective]
            }] } });

const iterateeFn = key => row => toNumber(row[key]);
const SUM = data => key => sumBy(data, iterateeFn(key));
const MIN = data => key => minBy(data, iterateeFn(key))[key];
const MAX = data => key => maxBy(data, iterateeFn(key))[key];
const AVG = data => key => {
    const length = data.length || 0;
    if (length === 0)
        return 0;
    const totalSum = SUM(data)(key);
    return (totalSum / length).toFixed(2);
};
const $operations = new Map([
    ['SUM', SUM],
    ['MIN', MIN],
    ['MAX', MAX],
    ['AVG', AVG]
]);
const runAggregator = (aggregateFn, data, key) => {
    const aggregateFnUpper = aggregateFn.toUpperCase();
    if ($operations.has(aggregateFnUpper)) {
        return $operations.get(aggregateFnUpper)(data)(key);
    }
    throw new Error('Specified Aggregator function does not exists');
};

class BigNumberComponent extends BaseComponent {
    constructor(dataService, defaultConfig, cdr, CONSTANTS) {
        super(dataService);
        this.dataService = dataService;
        this.cdr = cdr;
        this.CONSTANTS = CONSTANTS;
        this.reportType = IReportType.CHART;
        this.type = ChartType.BIG_NUMBER;
        this.inputParameters = {};
        this.exportOptions = ['csv'];
        this.bigNumberDataClosure = (dataExpr) => $aggregateFn => (data) => {
            return {
                getData(overriddenData) {
                    data = overriddenData || data;
                    return runAggregator($aggregateFn, data, dataExpr);
                },
                addData(newData) {
                    data = data.concat(newData);
                    return this.getData();
                }
            };
        };
        this._defaultConfig = defaultConfig;
    }
    initialize({ config, data, type = "bigNumber" }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(config && data))
                throw new SyntaxError(this.CONSTANTS.INVALID_INPUT);
            this.config = config = Object.assign(Object.assign({}, config), { type });
            const fetchedJSON = this.data = yield this.fetchData(data).toPromise().catch(err => []);
            this.builder(config, fetchedJSON);
            this._isInitialized = true;
            this.state.emit(ReportState.DONE);
        });
    }
    builder(config, JSONData) {
        const { header = this._defaultConfig.header, footer = this._defaultConfig.footer, dataExpr, operation = this._defaultConfig.operation } = config;
        if (!dataExpr || !JSONData) {
            throw Error(this.CONSTANTS.INVALID_INPUT);
        }
        this._bigNumberClosure = this.bigNumberDataClosure(dataExpr)(operation)(JSONData);
        const bigNumberObj = { header, footer, data: this._bigNumberClosure.getData() };
        this.setBigNumberData(bigNumberObj);
    }
    setBigNumberData(config = {}) {
        this.inputParameters = Object.assign(Object.assign(Object.assign({}, this._defaultConfig), this.inputParameters), config);
        this.$context = { data: this.data, config: this.config, inputParameters: this.inputParameters, exportOptions: this.exportOptions };
        this.cdr.detectChanges();
    }
    reset() {
        this.eventsSubject.next();
    }
    destroy() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    update(input) {
        this.checkIfInitialized();
        if (!input)
            throw new Error(this.CONSTANTS.INVALID_INPUT);
        const { config = {}, data = null } = input;
        const { header, footer, dataExpr, operation = 'SUM' } = config;
        let bigNumber;
        if (data) {
            this._bigNumberClosure = (dataExpr && this.bigNumberDataClosure(dataExpr)(operation)(data)) || this._bigNumberClosure;
            bigNumber = this._bigNumberClosure.getData(data);
        }
        this.setBigNumberData(Object.assign(Object.assign(Object.assign({}, (header && { header })), (footer && { footer })), (bigNumber && {
            data: bigNumber
        })));
    }
    addData(data) {
        if (!data)
            throw new Error(this.CONSTANTS.INVALID_INPUT);
        data = Array.isArray(data) ? data : [data];
        const bigNumber = this._bigNumberClosure.addData(data);
        this.setBigNumberData({
            data: bigNumber
        });
    }
    refreshChart() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    getTelemetry() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    exportAs(format) {
        if (!this.exportOptions.includes(format)) {
            throw new Error('given type not supported');
        }
        this.exportAsCsv();
    }
}
BigNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: BigNumberComponent, deps: [{ token: DATA_SERVICE }, { token: DEFAULT_CONFIG }, { token: i0.ChangeDetectorRef }, { token: DASHLET_CONSTANTS }], target: i0.ɵɵFactoryTarget.Component });
BigNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: BigNumberComponent, selector: "sb-big-number", providers: [
        {
            provide: DEFAULT_CONFIG,
            useValue: {
                header: '',
                footer: '',
                operation: 'SUM'
            }
        }
    ], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultTemplate let-config>\n  <div class=\"ui cards\">\n    <div class=\"card\">\n      <div class=\"content\">\n        <div class=\"header\">{{config?.inputParameters?.header}}</div>\n        <div class=\"meta\">{{config?.inputParameters?.footer}}</div>\n        <div class=\"description\">\n          {{config?.inputParameters?.data}}\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #defaultFilterTemplate let-context>\n  <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n    (filteredData)=\"update({data: $event})\" [resetFilters]=\"eventsSubject.asObservable()\">\n  </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"$context\" [ngTemplateOutlet]=\"templateRefs?.body || defaultTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>", styles: [""], dependencies: [{ kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: FiltersComponent, selector: "sb-dashlets-filters", inputs: ["config", "data", "resetFilters"], outputs: ["filteredData"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: BigNumberComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sb-big-number', providers: [
                        {
                            provide: DEFAULT_CONFIG,
                            useValue: {
                                header: '',
                                footer: '',
                                operation: 'SUM'
                            }
                        }
                    ], template: "<ng-template #defaultTemplate let-config>\n  <div class=\"ui cards\">\n    <div class=\"card\">\n      <div class=\"content\">\n        <div class=\"header\">{{config?.inputParameters?.header}}</div>\n        <div class=\"meta\">{{config?.inputParameters?.footer}}</div>\n        <div class=\"description\">\n          {{config?.inputParameters?.data}}\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #defaultFilterTemplate let-context>\n  <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n    (filteredData)=\"update({data: $event})\" [resetFilters]=\"eventsSubject.asObservable()\">\n  </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"$context\" [ngTemplateOutlet]=\"templateRefs?.body || defaultTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>" }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Inject,
                        args: [DATA_SERVICE]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DEFAULT_CONFIG]
                    }] }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DASHLET_CONSTANTS]
                    }] }];
    } });

var bigNumber_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BigNumberComponent: BigNumberComponent
});

const TABLE_DEFAULT_CONFIG = {
    tableLevelConfig: {
        autoWidth: true,
        paging: false,
        bFilter: false,
        bInfo: false,
        info: false,
        searchable: false,
        bLengthChange: false
    },
    columnConfig: {
        searchable: true,
        orderable: true,
        visible: true,
        autoWidth: true
    }
};

const jsonExport = jsonexport;
class DtTableComponent extends BaseComponent {
    constructor(dataService, defaultConfig, CONSTANTS) {
        super(dataService);
        this.dataService = dataService;
        this.CONSTANTS = CONSTANTS;
        this.reportType = IReportType.TABLE;
        this.inputParameters = {};
        this.exportOptions = ['csv'];
        this.rowClickHandler = (row, data, index) => {
            const self = this;
            $('td', row).off('click');
            $('td', row).on('click', () => {
                this.events.emit({
                    type: 'CLICK',
                    event: data
                });
            });
            return row;
        };
        this._addDefaultToColumn = column => {
            return Object.assign(Object.assign({}, this._defaultConfig['columnConfig']), column);
        };
        this._defaultConfig = defaultConfig;
    }
    set dataTableElement(element) {
        if (!element)
            return;
        this._dtClosure = this._tableOpsClosure(element && element['dtInstance']);
    }
    initialize({ config, type, data }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(config && type && data))
                throw new SyntaxError(this.CONSTANTS.INVALID_INPUT);
            this.config = config = Object.assign(Object.assign({}, config), { type });
            const fetchedJSON = this.data = yield this.fetchData(data).toPromise().catch(err => []);
            this.builder(config, fetchedJSON);
            this._isInitialized = true;
            this.state.emit(ReportState.DONE);
        });
    }
    builder(config, data) {
        const { columnConfig } = config, others = __rest(config, ["columnConfig"]);
        const columns = columnConfig.map(this._addDefaultToColumn);
        const columnsSortedByIndex = sortBy(columns, ['index']);
        this._setTableOptions(Object.assign(Object.assign({}, others), { data, columns: columnsSortedByIndex, rowCallback: this.rowClickHandler.bind(this) }));
    }
    _setTableOptions(config = {}) {
        this.inputParameters = Object.assign(Object.assign(Object.assign({}, this._defaultConfig['tableLevelConfig']), this.inputParameters), config);
        this.$context = { data: this.data, config: this.config, inputParameters: this.inputParameters, exportOptions: this.exportOptions, reset: false };
    }
    getRowsCount() {
        return this._dtClosure && this._dtClosure.rowsCount();
    }
    // resets to the original state.
    reset() {
        this.eventsSubject.next();
        this._dtClosure.updateData(this.data);
    }
    destroy() {
        const { destroy } = this._dtClosure;
        if (destroy && typeof destroy === 'function') {
            try {
                destroy.call(this._dtClosure);
            }
            catch (err) {
                console.error('component not destroyed', err);
            }
        }
    }
    update(input) {
        this.checkIfInitialized();
        if (!input)
            throw new Error(this.CONSTANTS.INVALID_INPUT);
        const { config = {}, data = null } = input;
        const { columnConfig: columns } = config, others = __rest(config, ["columnConfig"]);
        if (data && this._dtClosure) {
            this._dtClosure.updateData(data);
        }
        this._setTableOptions(Object.assign(Object.assign(Object.assign({}, others), (data && { data })), (columns && { columns })));
    }
    ;
    addRows(data) {
        this.addData(data);
    }
    getRowAtIndex(index) {
        const { getRowAtIndex } = this._dtClosure;
        if (getRowAtIndex) {
            return getRowAtIndex.bind(this._dtClosure, index);
        }
    }
    removeRow(index) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this._dtClosure.getData();
            data.splice(index, 1);
            yield this._dtClosure.updateData(data);
        });
    }
    addData(data) {
        const { addData } = this._dtClosure;
        if (addData && typeof addData === 'function') {
            try {
                addData.call(this._dtClosure, data);
            }
            catch (error) {
                console.error('addition of data failed', error);
            }
        }
    }
    _tableOpsClosure(tableInstance) {
        return {
            get instance() {
                return tableInstance;
            },
            addData(data) {
                return __awaiter(this, void 0, void 0, function* () {
                    const instance = yield this.instance;
                    instance.row.add(data);
                    instance.draw();
                });
            },
            draw() {
                return __awaiter(this, void 0, void 0, function* () {
                    const instance = yield this.instance;
                    instance.draw();
                    return instance;
                });
            },
            destroy() {
                return __awaiter(this, void 0, void 0, function* () {
                    const instance = yield this.instance;
                    instance.destroy();
                    return instance;
                });
            },
            updateData(data) {
                return __awaiter(this, void 0, void 0, function* () {
                    const instance = yield this.instance;
                    instance.clear();
                    instance.rows.add(data);
                    instance.draw();
                });
            },
            rowsCount() {
                return __awaiter(this, void 0, void 0, function* () {
                    const instance = yield this.instance;
                    return instance.rows().count();
                });
            },
            getData() {
                return __awaiter(this, void 0, void 0, function* () {
                    const instance = yield this.instance;
                    return instance.rows().data();
                });
            },
            getRowAtIndex(index) {
                return __awaiter(this, void 0, void 0, function* () {
                    const data = yield this.getData();
                    return data[index];
                });
            }
        };
    }
    _getColumnsForStrictMode() {
        const columnsConfig = get(this.config, 'columnConfig');
        const columnsSortedByIndex = sortBy(columnsConfig, 'index');
        const omitHiddenColumns = omitBy(columnsSortedByIndex, col => get(col, 'visible') === false);
        return omitHiddenColumns;
    }
    // Returns the csv string for the mobile platform
    exportCsv(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let JSON = yield this._dtClosure.getData();
            if (options && options['strict']) {
                const columnsConfig = this._getColumnsForStrictMode();
                const columnsToPick = map$1(columnsConfig, 'data');
                const headersMapping = map$1(columnsConfig, 'title');
                options['rename'] = headersMapping;
                JSON = this.sortAndTransformData(JSON || this.data, { columnsToPick });
            }
            return this.getCsv((JSON && JSON.toArray()) || this.data, options);
        });
    }
    exportAs(format, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.exportOptions.includes(format)) {
                throw new Error('given type not supported');
            }
            const data = yield this._dtClosure.getData();
            switch (format) {
                case 'csv': {
                    if (options && options['strict']) {
                        const columnsConfig = this._getColumnsForStrictMode();
                        const headersMapping = map$1(columnsConfig, 'title');
                        const columnsToPick = map$1(columnsConfig, 'data');
                        options['rename'] = headersMapping;
                        options['columnsToPick'] = columnsToPick;
                    }
                    this.exportAsCsv(data && data.toArray(), options);
                    break;
                }
            }
        });
    }
}
DtTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DtTableComponent, deps: [{ token: DATA_SERVICE }, { token: DEFAULT_CONFIG }, { token: DASHLET_CONSTANTS }], target: i0.ɵɵFactoryTarget.Component });
DtTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: DtTableComponent, selector: "sb-dt-table", providers: [
        {
            provide: DEFAULT_CONFIG,
            useValue: TABLE_DEFAULT_CONFIG
        }
    ], viewQueries: [{ propertyName: "dataTableElement", first: true, predicate: DataTableDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultFilterTemplate let-context>\n  <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n    (filteredData)=\"update({data: $event})\"  [resetFilters]=\"eventsSubject.asObservable()\">\n  </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"$context?.inputParameters\">\n  <table datatable [dtOptions]=\"$context?.inputParameters\" class=\"row-border hover\"></table>\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>", styles: [""], dependencies: [{ kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.DataTableDirective, selector: "[datatable]", inputs: ["dtOptions", "dtTrigger"] }, { kind: "component", type: FiltersComponent, selector: "sb-dashlets-filters", inputs: ["config", "data", "resetFilters"], outputs: ["filteredData"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DtTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sb-dt-table', providers: [
                        {
                            provide: DEFAULT_CONFIG,
                            useValue: TABLE_DEFAULT_CONFIG
                        }
                    ], template: "<ng-template #defaultFilterTemplate let-context>\n  <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n    (filteredData)=\"update({data: $event})\"  [resetFilters]=\"eventsSubject.asObservable()\">\n  </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"$context?.inputParameters\">\n  <table datatable [dtOptions]=\"$context?.inputParameters\" class=\"row-border hover\"></table>\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>" }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Inject,
                        args: [DATA_SERVICE]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DEFAULT_CONFIG]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DASHLET_CONSTANTS]
                    }] }];
    }, propDecorators: { dataTableElement: [{
                type: ViewChild,
                args: [DataTableDirective]
            }] } });

var dtTable_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DtTableComponent: DtTableComponent
});

const __defaultConfig = {
    initialCoordinate: [20, 78],
    latBounds: [6.4626999, 68.1097],
    lonBounds: [35.513327, 97.39535869999999],
    initialZoomLevel: 5,
    controlTitle: 'India Heat Map',
    tileLayer: {
        urlTemplate: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        options: {
            attributions: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }
    },
    rootStyle: {
        fillColor: '#007cbe',
        weight: 2,
        opacity: 1,
        color: 'white',
        dashArray: '3',
        fillOpacity: 0.7,
        cursor: 'no-drop'
    },
    country: null,
    states: [],
    state: null,
    districts: [],
    metrics: [],
    strict: false,
    folder: 'geoJSONFiles',
    labelExpr: 'District'
};

var geoJSONDataMapping = [
    {
        name: "India",
        code: "",
        type: "country",
        geoJSONFilename: "india.json"
    },
    {
        name: "Jammu And Kashmir",
        code: "01",
        type: "state",
        geoJSONFilename: "jammukashmir_district.json"
    },
    {
        name: "Kupwara",
        code: "0101",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Baramula",
        code: "0102",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Srinagar",
        code: "0103",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Badgam",
        code: "0104",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pulwama",
        code: "0105",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Anantnag",
        code: "0106",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Doda",
        code: "0109",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Udhampur",
        code: "0110",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Punch",
        code: "0111",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rajauri",
        code: "0112",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jammu",
        code: "0113",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kathua",
        code: "0114",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Shopian",
        code: "0115",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bandipora",
        code: "0116",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kishtwar",
        code: "0117",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ramban",
        code: "0118",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ganderbal",
        code: "0119",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kulgam",
        code: "0120",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Reasi",
        code: "0121",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Samba",
        code: "0122",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Himachal Pradesh",
        code: "02",
        type: "state",
        geoJSONFilename: "himachalpradesh_district.json"
    },
    {
        name: "Chamba",
        code: "0201",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kangra",
        code: "0202",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lahul & Spiti",
        code: "0203",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kullu",
        code: "0204",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mandi",
        code: "0205",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hamirpur (H.P.)",
        code: "0206",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Una",
        code: "0207",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bilaspur (H.P.)",
        code: "0208",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Solan",
        code: "0209",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sirmaur",
        code: "0210",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Shimla",
        code: "0211",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kinnaur",
        code: "0212",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Punjab",
        code: "03",
        type: "state",
        geoJSONFilename: "punjab_district.json"
    },
    {
        name: "Gurdaspur",
        code: "0301",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Amritsar",
        code: "0302",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kapurthala",
        code: "0303",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jalandhar",
        code: "0304",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hoshiarpur",
        code: "0305",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Shaheed Bhagat Singh Nagar",
        code: "0306",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rupnagar",
        code: "0307",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Fatehgarh Sahib",
        code: "0308",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ludhiana",
        code: "0309",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Moga",
        code: "0310",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ferozepur",
        code: "0311",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sri Muktsar Sahib",
        code: "0312",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Faridkot",
        code: "0313",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bathinda",
        code: "0314",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mansa",
        code: "0315",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sangrur",
        code: "0316",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Patiala",
        code: "0317",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sahibzada Ajit Singh Nagar",
        code: "0318",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tarn Taran",
        code: "0319",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Barnala",
        code: "0320",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Fazilka",
        code: "0321",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pathankot",
        code: "0322",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chandigarh",
        code: "04",
        type: "state",
        geoJSONFilename: "chandigarh_district.json"
    },
    {
        name: "Chandigarh",
        code: "0401",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Uttarakhand",
        code: "05",
        type: "state",
        geoJSONFilename: "uttarakhand_district.json"
    },
    {
        name: "Uttarkashi",
        code: "0501",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chamoli",
        code: "0502",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rudraprayag",
        code: "0503",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tehri Garhwal",
        code: "0504",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dehradun",
        code: "0505",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Garhwal",
        code: "0506",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pithoragarh",
        code: "0507",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bageshwar",
        code: "0508",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Almora",
        code: "0509",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Champawat",
        code: "0510",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nainital",
        code: "0511",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Udham Singh Nagar",
        code: "0512",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hardwar",
        code: "0513",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Haryana",
        code: "06",
        type: "state",
        geoJSONFilename: "haryana_district.json"
    },
    {
        name: "Panchkula",
        code: "0601",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ambala",
        code: "0602",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Yamunanagar",
        code: "0603",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kurukshetra",
        code: "0604",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kaithal",
        code: "0605",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Karnal",
        code: "0606",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Panipat",
        code: "0607",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sonipat",
        code: "0608",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jind",
        code: "0609",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Fatehabad",
        code: "0610",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sirsa",
        code: "0611",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hisar",
        code: "0612",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bhiwani",
        code: "0613",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rohtak",
        code: "0614",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jhajjar",
        code: "0615",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mahendragarh",
        code: "0616",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rewari",
        code: "0617",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gurugram",
        code: "0618",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mewat",
        code: "0619",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Faridabad",
        code: "0620",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Palwal",
        code: "0621",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Charkhi Dadri",
        code: "0622",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Delhi",
        code: "07",
        type: "state",
        geoJSONFilename: "delhi_district.json"
    },
    {
        name: "North West Delhi",
        code: "0701",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "North Delhi",
        code: "0702",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "North East Delhi",
        code: "0703",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "East Delhi",
        code: "0704",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "New Delhi",
        code: "0705",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Central Delhi",
        code: "0706",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "West Delhi",
        code: "0707",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "South West Delhi",
        code: "0708",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "South Delhi",
        code: "0709",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "South East Delhi",
        code: "0710",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Shahdara",
        code: "0711",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rajasthan",
        code: "08",
        type: "state",
        geoJSONFilename: "rajasthan_district.json"
    },
    {
        name: "Ganganagar",
        code: "0801",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hanumangarh",
        code: "0802",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bikaner",
        code: "0803",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Churu",
        code: "0804",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jhunjhunu",
        code: "0805",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Alwar",
        code: "0806",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bharatpur",
        code: "0807",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dhaulpur",
        code: "0808",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Karauli",
        code: "0809",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sawai Madhopur",
        code: "0810",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dausa",
        code: "0811",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jaipur",
        code: "0812",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sikar",
        code: "0813",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nagaur",
        code: "0814",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jodhpur",
        code: "0815",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jaisalmer",
        code: "0816",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Barmer",
        code: "0817",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jalor",
        code: "0818",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sirohi",
        code: "0819",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pali",
        code: "0820",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ajmer",
        code: "0821",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tonk",
        code: "0822",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bundi",
        code: "0823",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bhilwara",
        code: "0824",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rajsamand",
        code: "0825",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Udaipur",
        code: "0826",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dungarpur",
        code: "0827",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Banswara",
        code: "0828",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chittaurgarh",
        code: "0829",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kota",
        code: "0830",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Baran",
        code: "0831",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jhalawar",
        code: "0832",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pratapgarh",
        code: "0833",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Uttar Pradesh",
        code: "09",
        type: "state",
        geoJSONFilename: "uttarpradesh_district.json"
    },
    {
        name: "Saharanpur",
        code: "09132",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Muzaffarnagar",
        code: "09133",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bijnor",
        code: "09134",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Moradabad",
        code: "09135",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rampur",
        code: "09136",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Amroha",
        code: "09137",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Meerut",
        code: "09138",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Baghpat",
        code: "09139",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ghaziabad",
        code: "09140",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gautam Budh Nagar",
        code: "09141",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bulandshahar",
        code: "09142",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Aligarh",
        code: "09143",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hathras",
        code: "09144",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mathura",
        code: "09145",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Agra",
        code: "09146",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Firozabad",
        code: "09147",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mainpuri",
        code: "09148",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Badaun",
        code: "09149",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bareilly",
        code: "09150",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pilibhit",
        code: "09151",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Shahjahanpur",
        code: "09152",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lakhimpur Kheri",
        code: "09153",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sitapur",
        code: "09154",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hardoi",
        code: "09155",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Unnao",
        code: "09156",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lucknow",
        code: "09157",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Raebareli",
        code: "09158",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Farrukhabad",
        code: "09159",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kannauj",
        code: "09160",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Etawah",
        code: "09161",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Auraiya",
        code: "09162",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kanpur Dehat",
        code: "09163",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kanpur Nagar",
        code: "09164",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jalaun",
        code: "09165",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jhansi",
        code: "09166",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lalitpur",
        code: "09167",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hamirpur",
        code: "09168",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mahoba",
        code: "09169",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Banda",
        code: "09170",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chitrakoot",
        code: "09171",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Fatehpur",
        code: "09172",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pratapgarh",
        code: "09173",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kaushambi",
        code: "09174",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Prayagraj(Allahabad)",
        code: "09175",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Barabanki",
        code: "09176",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ayodhya(Faizabad)",
        code: "09177",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ambedkar Nagar",
        code: "09178",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sultanpur",
        code: "09179",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Behraich",
        code: "09180",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Shravasti",
        code: "09181",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Balrampur",
        code: "09182",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gonda",
        code: "09183",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sidharthnagar",
        code: "09184",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Basti",
        code: "09185",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sant Kabir Nagar",
        code: "09186",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Maharajganj",
        code: "09187",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gorakhpur",
        code: "09188",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kushinagar",
        code: "09189",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Deoria",
        code: "09190",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Azamgarh",
        code: "09191",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mau",
        code: "09192",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ballia",
        code: "09193",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jaunpur",
        code: "09194",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ghazipur",
        code: "09195",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chandauli",
        code: "09196",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Varanasi",
        code: "09197",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sant Ravidas Nagar",
        code: "09198",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mirzapur",
        code: "09199",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sonbhadra",
        code: "09200",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Etah",
        code: "09201",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kasganj",
        code: "09202",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Amethi",
        code: "09203",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hapur",
        code: "09204",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sambhal",
        code: "09205",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Shamli",
        code: "09206",
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bihar",
        code: 10,
        type: "state",
        geoJSONFilename: "bihar_district.json"
    },
    {
        name: "Pashchim Champaran",
        code: 1001,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Purba Champaran",
        code: 1002,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sheohar",
        code: 1003,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sitamarhi",
        code: 1004,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Madhubani",
        code: 1005,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Supaul",
        code: 1006,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Araria",
        code: 1007,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kishanganj",
        code: 1008,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Purnia",
        code: 1009,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Katihar",
        code: 1010,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Madhepura",
        code: 1011,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Saharsa",
        code: 1012,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Darbhanga",
        code: 1013,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Muzaffarpur",
        code: 1014,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gopalganj",
        code: 1015,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Siwan",
        code: 1016,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Saran",
        code: 1017,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Vaishali",
        code: 1018,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Samastipur",
        code: 1019,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Begusarai",
        code: 1020,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Khagaria",
        code: 1021,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bhagalpur",
        code: 1022,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Banka",
        code: 1023,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Munger",
        code: 1024,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lakhisarai",
        code: 1025,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sheikhpura",
        code: 1026,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nalanda",
        code: 1027,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Patna",
        code: 1028,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bhojpur",
        code: 1029,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Buxar",
        code: 1030,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kaimur (Bhabua)",
        code: 1031,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rohtas",
        code: 1032,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jehanabad",
        code: 1033,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Aurangabad (Bihar)",
        code: 1034,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gaya",
        code: 1035,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nawada",
        code: 1036,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jamui",
        code: 1037,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Arwal",
        code: 1038,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sikkim",
        code: 11,
        type: "state",
        geoJSONFilename: "sikkim_district.json"
    },
    {
        name: "North Sikkim",
        code: 1101,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "West Sikkim",
        code: 1102,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "South Sikkim",
        code: 1103,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "East Sikkim",
        code: 1104,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Arunachal Pradesh",
        code: 12,
        type: "state",
        geoJSONFilename: "arunachalpradesh_districts.json"
    },
    {
        name: "Tawang",
        code: 1201,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "West Kameng",
        code: 1202,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "East Kameng",
        code: 1203,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Papum Pare",
        code: 1204,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lower Subansiri",
        code: 1205,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Upper Subansiri",
        code: 1206,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "West Siang",
        code: 1207,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "East Siang",
        code: 1208,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Upper Siang",
        code: 1209,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dibang Valley",
        code: 1210,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lohit",
        code: 1211,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Changlang",
        code: 1212,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tirap",
        code: 1213,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kurung Kumey",
        code: 1214,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lower Dibang Valley",
        code: 1215,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Anjaw",
        code: 1216,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Longding",
        code: 1217,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Namsai",
        code: 1218,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kra Dadi",
        code: 1219,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Siang",
        code: 1220,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kamle",
        code: 1221,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lepa Rada",
        code: 1222,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lower Siang",
        code: 1223,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pakke Kessang",
        code: 1224,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Shi Yomi",
        code: 1225,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nagaland",
        code: 13,
        type: "state",
        geoJSONFilename: "nagaland_district.json"
    },
    {
        name: "Mon",
        code: 1301,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tuensang",
        code: 1302,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mokokchung",
        code: 1303,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Zunheboto",
        code: 1304,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Wokha",
        code: 1305,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dimapur",
        code: 1306,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kohima",
        code: 1307,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Phek",
        code: 1308,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Longleng",
        code: 1309,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kiphire",
        code: 1310,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Peren",
        code: 1311,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Manipur",
        code: 14,
        type: "state",
        geoJSONFilename: "manipur_district.json"
    },
    {
        name: "Senapati",
        code: 1401,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tamenglong",
        code: 1402,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Churachandpur",
        code: 1403,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bishnupur",
        code: 1404,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Thoubal",
        code: 1405,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Imphal West",
        code: 1406,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Imphal East",
        code: 1407,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ukhrul",
        code: 1408,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chandel",
        code: 1409,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jiribam",
        code: 1410,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kakching",
        code: 1411,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kamjong",
        code: 1412,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kangpokpi",
        code: 1413,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Noney",
        code: 1414,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pherzawl",
        code: 1415,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tengnoupal",
        code: 1416,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mizoram",
        code: 15,
        type: "state",
        geoJSONFilename: "mizoram_district.json"
    },
    {
        name: "Mamit",
        code: 1501,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kolasib",
        code: 1502,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Aizawl",
        code: 1503,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Champhai",
        code: 1504,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Serchhip",
        code: 1505,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lunglei",
        code: 1506,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lawngtlai",
        code: 1507,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Saiha",
        code: 1508,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tripura",
        code: 16,
        type: "state",
        geoJSONFilename: "tripura_district.json"
    },
    {
        name: "West Tripura",
        code: 1601,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "South Tripura",
        code: 1602,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dhalai",
        code: 1603,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "North Tripura",
        code: 1604,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sepahijala",
        code: 1605,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Khowai",
        code: 1606,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gomati",
        code: 1607,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Unakoti",
        code: 1608,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Meghalaya",
        code: 17,
        type: "state",
        geoJSONFilename: "meghalaya_district.json"
    },
    {
        name: "West Garo Hills",
        code: 1701,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "East Garo Hills",
        code: 1702,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "South Garo Hills",
        code: 1703,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "West Khasi Hills",
        code: 1704,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ri Bhoi",
        code: 1705,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "East Khasi Hills",
        code: 1706,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "West Jaintia Hills",
        code: 1707,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "North Garo Hills",
        code: 1708,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "East Jaintia Hills",
        code: 1709,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "South West Khasi Hills",
        code: 1710,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "South West Garo Hills",
        code: 1711,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Assam",
        code: 18,
        type: "state",
        geoJSONFilename: "assam_district.json"
    },
    {
        name: "Kokrajhar",
        code: 1801,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dhubri",
        code: 1802,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Goalpara",
        code: 1803,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bongaigaon",
        code: 1804,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Barpeta",
        code: 1805,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kamrup Rural",
        code: 1806,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nalbari",
        code: 1807,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Darrang",
        code: 1808,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Morigaon",
        code: 1809,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nagaon",
        code: 1810,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sonitpur",
        code: 1811,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lakhimpur",
        code: 1812,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dhemaji",
        code: 1813,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tinsukia",
        code: 1814,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dibrugarh",
        code: 1815,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sivasagar",
        code: 1816,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jorhat",
        code: 1817,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Golaghat",
        code: 1818,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Karbi Anglong",
        code: 1819,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dima Hasao",
        code: 1820,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Cachar",
        code: 1821,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Karimganj",
        code: 1822,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hailakandi",
        code: 1823,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Baksa",
        code: 1824,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chirang",
        code: 1825,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Udalguri",
        code: 1826,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kamrup Metropolitan",
        code: 1827,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Biswanath",
        code: 1828,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Charaideo",
        code: 1829,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hojai",
        code: 1830,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Majuli",
        code: 1831,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "South Salmara-Mankachar",
        code: 1832,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "West Karbi Anglong",
        code: 1833,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "West Bengal",
        code: 19,
        type: "state",
        geoJSONFilename: "westbengal_district.json"
    },
    {
        name: "Darjiling",
        code: 1901,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jalpaiguri",
        code: 1902,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Koch Bihar",
        code: 1903,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Uttar Dinajpur",
        code: 1904,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dakshin Dinajpur",
        code: 1905,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Maldah",
        code: 1906,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Murshidabad",
        code: 1907,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Birbhum",
        code: 1908,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nadia",
        code: 1910,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "North Twenty Four Pargana",
        code: 1911,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hugli",
        code: 1912,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bankura",
        code: 1913,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Puruliya",
        code: 1914,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Haora",
        code: 1916,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kolkata",
        code: 1917,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "South  Twenty Four Pargan",
        code: 1918,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Purba Medinipur",
        code: 1919,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Paschim Medinipur",
        code: 1920,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Alipurduar",
        code: 1922,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jhargram",
        code: 1923,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kalimpong",
        code: 1924,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Paschim Burdwan (West Bardhaman)",
        code: 1925,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Purba Burdwan (East Bardhaman)",
        code: 1926,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jharkhand",
        code: 20,
        type: "state",
        geoJSONFilename: "jharkhand_district.json"
    },
    {
        name: "Garhwa",
        code: 2001,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Palamu",
        code: 2002,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chatra",
        code: 2003,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hazaribagh",
        code: 2004,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Koderma",
        code: 2005,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Giridih",
        code: 2006,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Deoghar",
        code: 2007,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Godda",
        code: 2008,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sahibganj",
        code: 2009,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pakur",
        code: 2010,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dumka",
        code: 2011,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dhanbad",
        code: 2012,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bokaro",
        code: 2013,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ranchi",
        code: 2014,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lohardaga",
        code: 2015,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gumla",
        code: 2016,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pashchimi Singhbhum",
        code: 2017,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Purbi Singhbhum",
        code: 2018,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jamtara",
        code: 2019,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Saraikela-Kharsawan",
        code: 2020,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Simdega",
        code: 2021,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Latehar",
        code: 2022,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Khunti",
        code: 2023,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ramgarh",
        code: 2024,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Odisha",
        code: 21,
        type: "state",
        geoJSONFilename: "odisha_district.json"
    },
    {
        name: "Baragarh",
        code: 2101,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jharsuguda",
        code: 2102,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sambalpur",
        code: 2103,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Deogarh",
        code: 2104,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sundergarh",
        code: 2105,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Keonjhar",
        code: 2106,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mayurbhanj",
        code: 2107,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Balasore",
        code: 2108,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bhadrak",
        code: 2109,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kendrapara",
        code: 2110,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jagatsinghpur",
        code: 2111,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Cuttack",
        code: 2112,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jajpur",
        code: 2113,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dhenkanal",
        code: 2114,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Angul",
        code: 2115,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nayagarh",
        code: 2116,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Khurdha",
        code: 2117,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Puri",
        code: 2118,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ganjam",
        code: 2119,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gajapati",
        code: 2120,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kandhamal",
        code: 2121,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Boudh",
        code: 2122,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sonepur",
        code: 2123,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bolangir",
        code: 2124,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nuapada",
        code: 2125,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kalahandi",
        code: 2126,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rayagada",
        code: 2127,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nabarangpur",
        code: 2128,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Koraput",
        code: 2129,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Malkangiri",
        code: 2130,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chhattisgarh",
        code: 22,
        type: "state",
        geoJSONFilename: "chhattisgarh_district.json"
    },
    {
        name: "Koriya",
        code: 2201,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Surguja",
        code: 2202,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jashpur",
        code: 2203,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Raigarh",
        code: 2204,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Korba",
        code: 2205,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Janjgir-Champa",
        code: 2206,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bilaspur",
        code: 2207,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kawardha",
        code: 2208,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rajnandgaon",
        code: 2209,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Durg",
        code: 2210,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Raipur",
        code: 2211,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mahasamund",
        code: 2212,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dhamtari",
        code: 2213,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kanker",
        code: 2214,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bastar",
        code: 2215,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dantewada",
        code: 2216,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kondagaon",
        code: 2217,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Narayanpur",
        code: 2218,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mungeli",
        code: 2219,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bijapur",
        code: 2220,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sukma",
        code: 2221,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Balod",
        code: 2222,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bemetara",
        code: 2223,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Balodabazar",
        code: 2224,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gariaband",
        code: 2225,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Balrampur",
        code: 2226,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Surajpur",
        code: 2227,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gaurela-Pendra-Marvahi",
        code: 2228,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Madhya Pradesh",
        code: 23,
        type: "state",
        geoJSONFilename: "madhyapradesh_district.json"
    },
    {
        name: "Sheopur",
        code: 2301,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Morena",
        code: 2302,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bhind",
        code: 2303,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gwalior",
        code: 2304,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Datia",
        code: 2305,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Shivpuri",
        code: 2306,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Guna",
        code: 2307,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tikamgarh",
        code: 2308,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chhatarpur",
        code: 2309,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Panna",
        code: 2310,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sagar",
        code: 2311,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Damoh",
        code: 2312,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Satna",
        code: 2313,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rewa",
        code: 2314,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Umaria",
        code: 2315,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Shahdol",
        code: 2316,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sidhi",
        code: 2317,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Neemuch",
        code: 2318,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mandsaur",
        code: 2319,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ratlam",
        code: 2320,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ujjain",
        code: 2321,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Shajapur",
        code: 2322,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dewas",
        code: 2323,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jhabua",
        code: 2324,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dhar",
        code: 2325,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Indore",
        code: 2326,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Khargone",
        code: 2327,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Barwani",
        code: 2328,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Khandwa",
        code: 2329,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rajgarh",
        code: 2330,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Vidisha",
        code: 2331,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bhopal",
        code: 2332,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sehore",
        code: 2333,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Raisen",
        code: 2334,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Betul",
        code: 2335,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Harda",
        code: 2336,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hoshangabad",
        code: 2337,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Katni",
        code: 2338,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jabalpur",
        code: 2339,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Narsinghpur",
        code: 2340,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dindori",
        code: 2341,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mandla",
        code: 2342,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chhindwara",
        code: 2343,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Seoni",
        code: 2344,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Balaghat",
        code: 2345,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ashoknagar",
        code: 2346,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Anuppur",
        code: 2347,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Burhanpur",
        code: 2348,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Alirajpur",
        code: 2349,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Singrauli",
        code: 2350,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Agar Malwa",
        code: 2351,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Niwari",
        code: 2352,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gujarat",
        code: 24,
        type: "state",
        geoJSONFilename: "gujarat_district.json"
    },
    {
        name: "Kachchh",
        code: 2401,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Banaskantha",
        code: 2402,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Patan",
        code: 2403,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mahesana",
        code: 2404,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sabar Kantha",
        code: 2405,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gandhinagar",
        code: 2406,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ahmedabad",
        code: 2407,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Surendranagar",
        code: 2408,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rajkot",
        code: 2409,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jamnagar",
        code: 2410,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Porbandar",
        code: 2411,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Junagadh",
        code: 2412,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Amreli",
        code: 2413,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bhavnagar",
        code: 2414,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Anand",
        code: 2415,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kheda",
        code: 2416,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Panch Mahals",
        code: 2417,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dahod",
        code: 2418,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Vadodara",
        code: 2419,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Narmada",
        code: 2420,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bharuch",
        code: 2421,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Surat",
        code: 2422,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "The Dangs",
        code: 2423,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Navsari",
        code: 2424,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Valsad",
        code: 2425,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tapi",
        code: 2426,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Aravalli",
        code: 2427,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Botad",
        code: 2428,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Devbhoomi Dwarka",
        code: 2429,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gir Somnath",
        code: 2430,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mahisagar",
        code: 2431,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chhotaudepur",
        code: 2432,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Morbi",
        code: 2433,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Daman & Diu",
        code: 25,
        type: "state",
        geoJSONFilename: "damandiu_district.json"
    },
    {
        name: "Diu",
        code: 2501,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Daman",
        code: 2502,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dadra & Nagar Haveli",
        code: 26,
        type: "state",
        geoJSONFilename: "dadranagarhaveli_district.json"
    },
    {
        name: "Dadra And Nagar Haveli(Ut)",
        code: 2601,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Maharashtra",
        code: 27,
        type: "state",
        geoJSONFilename: "maharashtra_district.json"
    },
    {
        name: "Nandurbar",
        code: 2701,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dhule",
        code: 2702,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jalgaon",
        code: 2703,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Buldana",
        code: 2704,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Akola",
        code: 2705,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Washim",
        code: 2706,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Amravati",
        code: 2707,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Wardha",
        code: 2708,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nagpur",
        code: 2709,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bhandara",
        code: 2710,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gondia",
        code: 2711,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gadchiroli",
        code: 2712,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chandrapur",
        code: 2713,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Yavatmal",
        code: 2714,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nanded",
        code: 2715,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hingoli",
        code: 2716,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Parbhani",
        code: 2717,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jalna",
        code: 2718,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Aurangabad",
        code: 2719,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nashik",
        code: 2720,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Thane",
        code: 2721,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mumbai (Suburban)",
        code: 2722,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mumbai",
        code: 2723,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Raigad",
        code: 2724,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pune",
        code: 2725,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ahmednagar",
        code: 2726,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Beed",
        code: 2727,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Latur",
        code: 2728,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Osmanabad",
        code: 2729,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Solapur",
        code: 2730,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Satara",
        code: 2731,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ratnagiri",
        code: 2732,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sindhudurg",
        code: 2733,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kolhapur",
        code: 2734,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sangli",
        code: 2735,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Palghar",
        code: 2736,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Andhra Pradesh",
        code: 28,
        type: "state",
        geoJSONFilename: "andhrapradesh_district.json"
    },
    {
        name: "Srikakulam",
        code: 2811,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Vizianagaram",
        code: 2812,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Visakhapatnam",
        code: 2813,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "East Godavari",
        code: 2814,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "West Godavari",
        code: 2815,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Krishna",
        code: 2816,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Guntur",
        code: 2817,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Prakasam",
        code: 2818,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nellore",
        code: 2819,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kadapa",
        code: 2820,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kurnool",
        code: 2821,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Anantapur",
        code: 2822,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chittoor",
        code: 2823,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Karnataka",
        code: 29,
        type: "state",
        geoJSONFilename: "karnataka_district.json"
    },
    {
        name: "Belagavi",
        code: 2901,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bagalkot",
        code: 2902,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Vijayapura",
        code: 2903,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kalaburgi",
        code: 2904,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bidar",
        code: 2905,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Raichur",
        code: 2906,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Koppal",
        code: 2907,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Gadag",
        code: 2908,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dharwad",
        code: 2909,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Uttara Kannada",
        code: 2910,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Haveri",
        code: 2911,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ballari",
        code: 2912,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chitradurga",
        code: 2913,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Davanagere",
        code: 2914,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Shivamogga",
        code: 2915,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Udupi",
        code: 2916,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chikkamagaluru",
        code: 2917,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tumakuru",
        code: 2918,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kolar",
        code: 2919,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bengaluru Urban",
        code: 2920,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bengaluru Rural",
        code: 2921,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mandya",
        code: 2922,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hassan",
        code: 2923,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dakshina Kannada",
        code: 2924,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kodagu",
        code: 2925,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mysuru",
        code: 2926,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chamarajanagara",
        code: 2927,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chikkaballapura",
        code: 2929,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ramanagara",
        code: 2932,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Yadgir",
        code: 2933,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Goa",
        code: 30,
        type: "state",
        geoJSONFilename: "goa_district.json"
    },
    {
        name: "North Goa",
        code: 3001,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "South Goa",
        code: 3002,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Lakshadweep",
        code: 31,
        type: "state",
        geoJSONFilename: "lakshadweep_district.json"
    },
    {
        name: "Lakshadweep",
        code: 3101,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kerala",
        code: 32,
        type: "state",
        geoJSONFilename: "kerala_district.json"
    },
    {
        name: "Thiruvananthapuram",
        code: 3201,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kollam",
        code: 3202,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pathanamthitta",
        code: 3203,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Alappuzha",
        code: 3204,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kottayam",
        code: 3205,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Idukki",
        code: 3206,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ernakulam",
        code: 3207,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Thrissur",
        code: 3208,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Palakkad",
        code: 3209,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Malappuram",
        code: 3210,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kozhikode",
        code: 3211,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Wayanad",
        code: 3212,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kannur",
        code: 3213,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kasaragod",
        code: 3214,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tamil Nadu",
        code: 33,
        type: "state",
        geoJSONFilename: "tamilnadu_district.json"
    },
    {
        name: "Kanchipuram",
        code: 3301,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tiruvallur",
        code: 3302,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Cuddalore",
        code: 3303,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Villupuram",
        code: 3304,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Vellore",
        code: 3305,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tiruvannamalai",
        code: 3306,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Salem",
        code: 3307,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Namakkal",
        code: 3308,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dharmapuri",
        code: 3309,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Erode",
        code: 3310,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Coimbatore",
        code: 3311,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nilgiris",
        code: 3312,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Thanjavur",
        code: 3313,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nagapattinam",
        code: 3314,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tiruvarur",
        code: 3315,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tiruchirappalli",
        code: 3316,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Karur",
        code: 3317,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Perambalur",
        code: 3318,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pudukkottai",
        code: 3319,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Madurai",
        code: 3320,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Theni",
        code: 3321,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Dindigul",
        code: 3322,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ramanathapuram",
        code: 3323,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Virudhunagar",
        code: 3324,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sivagangai",
        code: 3325,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tirunelveli",
        code: 3326,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Thoothukkudi",
        code: 3327,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kanniyakumari",
        code: 3328,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chennai",
        code: 3329,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Krishnagiri",
        code: 3330,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ariyalur",
        code: 3331,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tiruppur",
        code: 3332,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Chengalpattu",
        code: 3333,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tirupattur",
        code: 3334,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ranipet",
        code: 3335,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mayiladuthurai",
        code: 3336,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Tenkasi",
        code: 3337,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Puducherry",
        code: 34,
        type: "state",
        geoJSONFilename: "puducherry_district.json"
    },
    {
        name: "Yanam",
        code: 3401,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Pondicherry",
        code: 3402,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mahe",
        code: 3403,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Karaikal",
        code: 3404,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Andaman & Nicobar Islands",
        code: 35,
        type: "state",
        geoJSONFilename: "andamannicobarislands_district.json"
    },
    {
        name: "Andamans",
        code: 3501,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nicobars",
        code: 3502,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Middle And North Andamans",
        code: 3503,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Telangana",
        code: 36,
        type: "state",
        geoJSONFilename: "telangana_district.json"
    },
    {
        name: "Adilabad",
        code: 3601,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Komaram Bheem",
        code: 3602,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mancherial",
        code: 3603,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nirmal",
        code: 3604,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nizamabad",
        code: 3605,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jagtial",
        code: 3606,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Peddapalli",
        code: 3607,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jayashankar",
        code: 3608,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Bhadradri",
        code: 3609,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mahabubabad",
        code: 3610,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Warangal Rural",
        code: 3611,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Warangal Urban",
        code: 3612,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Karimnagar",
        code: 3613,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rajanna",
        code: 3614,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kamareddy",
        code: 3615,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Sangareddy",
        code: 3616,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Medak",
        code: 3617,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Siddipet",
        code: 3618,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jangaon",
        code: 3619,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Yadadri",
        code: 3620,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Medchal-Malkajgiri",
        code: 3621,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Hyderbad",
        code: 3622,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Rangareddy",
        code: 3623,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Vikarabad",
        code: 3624,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mahabubnagar",
        code: 3625,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Jogulamba",
        code: 3626,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Wanaparthy",
        code: 3627,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nagarkurnool",
        code: 3628,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Nalgonda",
        code: 3629,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Suryapet",
        code: 3630,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Khammam",
        code: 3631,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Mulugu",
        code: 3632,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Narayanpet",
        code: 3633,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Ladakh",
        code: 38,
        type: "state",
        geoJSONFilename: "ladakh_district.json"
    },
    {
        name: "Leh",
        code: 3801,
        type: "district",
        geoJSONFilename: ""
    },
    {
        name: "Kargil",
        code: 3802,
        type: "district",
        geoJSONFilename: ""
    }
];

/**
 * @dynamic
 */
class MapComponent extends BaseComponent {
    constructor(dataService, defaultConfig, CONSTANTS) {
        super(dataService);
        this.dataService = dataService;
        this.CONSTANTS = CONSTANTS;
        this.reportType = IReportType.CHART;
        this.type = ChartType.MAP;
        this.inputParameters = {};
        this.exportOptions = ['csv'];
        this.getGeoJSON = new BehaviorSubject(undefined);
        this.mappingConfig = geoJSONDataMapping;
        this._defaultConfig = defaultConfig;
    }
    set mapContainer(element) {
        if (!element)
            return;
        if (this.inputParameters) {
            this.mapClosure = this._mapClosure(this.inputParameters);
            this.getGeoJSON.next(Object.assign(Object.assign({}, this.inputParameters), { reportData: this.data }));
        }
    }
    initialize({ config, data, type = ChartType.MAP }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(config && data))
                throw new SyntaxError(this.CONSTANTS.INVALID_INPUT);
            this.config = config = Object.assign(Object.assign({}, config), { type });
            const fetchedJSON = this.data = yield this.fetchData(data).toPromise().catch(err => []);
            this.builder(config, fetchedJSON);
            this._isInitialized = true;
            this.state.emit(ReportState.DONE);
        });
    }
    _setMapOptions(config = {}) {
        this.inputParameters = Object.assign(Object.assign(Object.assign(Object.assign({}, this._defaultConfig), this.inputParameters), this.config), config);
        this.$context = { data: this.data, config: this.config, inputParameters: this.inputParameters, exportOptions: this.exportOptions };
    }
    _mapClosure(config = {}) {
        const { initialCoordinate, initialZoomLevel, latBounds, lonBounds, mapId = this.id } = config;
        const map = L && L.map(mapId).setView(initialCoordinate, initialZoomLevel);
        const geoJSONLayer = map && (L && L.geoJSON(null, {
            style: this.setStyle.bind(this),
            onEachFeature: this.onEachFeature.bind(this)
        }));
        const maxBounds = L && L.latLngBounds([latBounds, lonBounds]);
        map.setMaxBounds(maxBounds);
        const { urlTemplate, options } = config.tileLayer;
        const controlObject = this.getControlObject();
        L && map && L.tileLayer(urlTemplate, options).addTo(map);
        geoJSONLayer && geoJSONLayer.addTo(map);
        controlObject && controlObject.addTo(map);
        return {
            get map() {
                return map;
            },
            get geoJSONLayer() { return geoJSONLayer; },
            set geoJSONLayers(data) {
                if (geoJSONLayer && map) {
                    geoJSONLayer.addData(data);
                    const bounds = geoJSONLayer.getBounds();
                    map.fitBounds(bounds);
                }
            },
            resetLayers() {
                geoJSONLayer && geoJSONLayer.clearLayers();
            },
            updatePropertiesInsideInfoControl(properties) {
                controlObject && controlObject.update(properties);
            }
        };
    }
    builder(config, _) {
        return __awaiter(this, void 0, void 0, function* () {
            this._setMapOptions(config);
            // geoJSON mapping can be overridden by passing in the config
            if (config.geoJSONMapping) {
                this.mappingConfig = config.geoJSONMapping;
            }
            this.getGeoJSON.pipe(skipWhile(input => input === undefined || input === null || !(input.hasOwnProperty('state') || input.hasOwnProperty('country'))), switchMap(input => {
                const { country, states, state, districts, metrics, labelExpr, strict, folder, reportData = [], omitMetrics = [] } = input;
                let paramter;
                if (country) {
                    paramter = { type: 'country', name: country };
                }
                else {
                    paramter = { type: 'state', name: state };
                }
                const { geoJSONFilename = null } = this.findRecordInConfigMapping(paramter) || {};
                if (!geoJSONFilename) {
                    return throwError('specified geoJSON file not found');
                }
                return this.getGeoJSONFile({ fileName: geoJSONFilename, folder }).pipe(map(geoJSONData => {
                    const { type, features = [] } = cloneDeep(geoJSONData);
                    let filteredFeatures;
                    if (country && states.length) {
                        filteredFeatures = this.addProperties({ reportData, layers: states, labelExpr, type: 'state', features, metrics, omitMetrics });
                    }
                    else {
                        filteredFeatures = this.addProperties({ reportData, layers: districts, labelExpr, type: 'district', features, metrics, omitMetrics });
                    }
                    return { type, features: strict ? filteredFeatures : features };
                }, catchError(err => {
                    return of({
                        type: 'FeatureCollection',
                        features: []
                    });
                })));
            }), tap((geoJSONLayers) => {
                if (this.mapClosure) {
                    this.mapClosure.geoJSONLayers = geoJSONLayers;
                }
            })).subscribe();
        });
    }
    reset() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    destroy() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    update(input) {
        this.checkIfInitialized();
        if (!input)
            throw new Error(this.CONSTANTS.INVALID_INPUT);
        if (this.mapClosure) {
            const { data = null, config = {} } = input;
            this._setMapOptions(config);
            if (this.inputParameters && data) {
                this.mapClosure.resetLayers();
                this.getGeoJSON.next(Object.assign(Object.assign({}, this.inputParameters), { strict: true, reportData: data }));
            }
        }
    }
    addData(data) {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    refreshChart() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    getTelemetry() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    exportAs(format) {
        if (!this.exportOptions.includes(format)) {
            throw new Error('given type not supported');
        }
        this.exportAsCsv();
    }
    /**
     * @description click handler for a specfic layer within the map
     * @private
     * @param {*} { properties, metaData }
     * @param {*} event
     * @memberof Map2Component
     */
    clickHandler({ properties = {}, metaData = {} }, event) {
        console.log(Object.assign(Object.assign({}, properties), metaData));
        this.events.emit({
            type: 'CLICK',
            event: Object.assign(Object.assign({}, metaData), properties)
        });
    }
    /**
     * @description handles mouse out event for a specific layer
     * @private
     * @param {*} { properties, metaData }
     * @param {*} event
     * @memberof Map2Component
     */
    mouseoutHandler({ properties = {}, metaData = {} }, event) {
        if (this.mapClosure) {
            this.mapClosure.geoJSONLayer.resetStyle(event.target);
        }
    }
    /**
     * @description mouseover event handler
     * @private
     * @param {*} { properties, metaData }
     * @param {*} event
     * @memberof Map2Component
     */
    mouseoverHandler({ properties = {}, metaData = {} }, event) {
        const layer = event.target;
        layer.setStyle({
            weight: 3,
            color: '#666',
            dashArray: '',
            fillOpacity: 0.8
        });
        if (L && (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge)) {
            layer.bringToFront();
        }
        this.mapClosure && this.mapClosure.updatePropertiesInsideInfoControl(properties);
        const mergedObj = Object.assign(Object.assign({}, properties), metaData);
        this.events.emit({
            type: 'HOVER',
            event: Object.assign({}, mergedObj)
        });
        layer.bindPopup(mergedObj.name || 'Unknown').openPopup();
    }
    /**
     * @description attaches event handlers on each layer
     * @private
     * @param {*} feature
     * @param {*} layer
     * @memberof Map2Component
     */
    onEachFeature(feature, layer) {
        const { properties, metaData = {} } = feature;
        layer.on({
            mouseover: this.mouseoverHandler.bind(this, { properties, metaData }),
            mouseout: this.mouseoutHandler.bind(this, { properties, metaData }),
            click: this.clickHandler.bind(this, { properties, metaData })
        });
    }
    getControlObject() {
        const { controlTitle } = this.inputParameters;
        const infoControl = L && L.control();
        infoControl.onAdd = function (map) {
            this._div = L && L.DomUtil.create('div', 'infoControl');
            this.update();
            return this._div;
        };
        infoControl.update = function (properties = {}) {
            const text = Object.entries(properties).map(([key, value]) => `<br />${key}: ${value}`).join('<br />');
            this._div.innerHTML = `<h4>${controlTitle}</h4>
      ${text}`;
        };
        return infoControl;
    }
    /**
     * @description sets styles for each feature layer
     * @private
     * @param {*} feature
     * @returns
     * @memberof MapComponent
     */
    setStyle(feature, layer) {
        const { metaData = {} } = feature;
        return Object.assign(Object.assign({}, this.inputParameters['rootStyle']), (!metaData.drillDown && !metaData.fileName &&
            { className: 'notAllowedCursor' }));
    }
    /**
   * @description dynamically add custom properties from external JSON to feature Objects
   * @private
   * @param {*} { reportData = [], layers = [], labelExpr = 'District', type = 'district', features = [], metrics = [] }
   * @returns
   * @memberof MapComponent
   */
    addProperties({ reportData = [], layers = [], labelExpr = 'District', type = 'district', features = [], metrics = [], omitMetrics = [] }) {
        const filteredFeatures = [];
        const datasets = groupBy(reportData || [], data => toLower(data[labelExpr]));
        layers.forEach(layer => {
            const recordFromConfigMapping = this.findRecordInConfigMapping({ type, name: layer });
            const dataset = datasets.hasOwnProperty(toLower(layer)) && datasets[toLower(layer)];
            const featureObj = features.find(feature => {
                const { properties = {} } = feature;
                return recordFromConfigMapping && +properties.code === +recordFromConfigMapping.code;
            });
            if (!recordFromConfigMapping || !dataset || !featureObj) {
                return;
            }
            featureObj['metaData'] = { name: layer };
            const result = reduce(dataset, (accumulator, value) => {
                metrics.forEach(metric => {
                    accumulator[metric] = (accumulator[metric] || 0) + (+value[metric]);
                });
                return accumulator;
            }, {});
            featureObj.properties = omit(Object.assign(Object.assign({}, (featureObj.properties || {})), (result || {})), omitMetrics);
            filteredFeatures.push(featureObj);
        });
        return filteredFeatures;
    }
    findRecordInConfigMapping({ type = null, name = null, code = null }) {
        return find(this.mappingConfig, config => {
            const { type: configType, name: configName, code: configCode } = config;
            if (code) {
                return configCode === code;
            }
            return configType && configName && toLower(configType) === toLower(type) && toLower(configName) === toLower(name);
        });
    }
    getGeoJSONFile({ folder = 'geoJSONFiles', fileName }) {
        return this.dataService.fetchGeoJSONFile(`${folder}/${fileName}`);
    }
}
MapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: MapComponent, deps: [{ token: DATA_SERVICE }, { token: DEFAULT_CONFIG }, { token: DASHLET_CONSTANTS }], target: i0.ɵɵFactoryTarget.Component });
MapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: MapComponent, selector: "sb-map", providers: [
        {
            provide: DEFAULT_CONFIG,
            useValue: __defaultConfig
        }
    ], viewQueries: [{ propertyName: "mapContainer", first: true, predicate: ["map"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultFilterTemplate let-context>\n    <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n        (filteredData)=\"update({data: $event})\">\n    </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n    [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n    [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"$context?.inputParameters\">\n    <div [attr.id]=\"id\" class=\"mapContainer\" #map></div>\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n    [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>", styles: [".mapContainer{height:800px}\n"], dependencies: [{ kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: FiltersComponent, selector: "sb-dashlets-filters", inputs: ["config", "data", "resetFilters"], outputs: ["filteredData"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: MapComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sb-map', providers: [
                        {
                            provide: DEFAULT_CONFIG,
                            useValue: __defaultConfig
                        }
                    ], template: "<ng-template #defaultFilterTemplate let-context>\n    <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n        (filteredData)=\"update({data: $event})\">\n    </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n    [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n    [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"$context?.inputParameters\">\n    <div [attr.id]=\"id\" class=\"mapContainer\" #map></div>\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n    [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>", styles: [".mapContainer{height:800px}\n"] }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Inject,
                        args: [DATA_SERVICE]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DEFAULT_CONFIG]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DASHLET_CONSTANTS]
                    }] }];
    }, propDecorators: { mapContainer: [{
                type: ViewChild,
                args: ['map']
            }] } });

var map_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    MapComponent: MapComponent
});

class DataService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.cachedData = new Map();
    }
    /**
     * @description fetches the dataSources using the api configuration
     * @param {apiConfig} config
     * @return {*}
     * @memberof DataService
     */
    fetchData(config) {
        const stringifiedConfig = JSON.stringify(config);
        if (this.cachedData.has(stringifiedConfig))
            return of(this.cachedData.get(stringifiedConfig));
        const { method, url, options } = config;
        return this.httpClient.request(method, url, options).pipe(tap(response => {
            this.cachedData.set(stringifiedConfig, response);
        }));
    }
    /**
     * @description method is used to fetch the geoJSON files. Can be overridden by the client to use the necessary endpoint
     * @param {string} path
     * @return {*}
     * @memberof DataService
     */
    fetchGeoJSONFile(path) {
        return this.fetchData({ method: 'GET', url: `/reports/fetch/${path}`, options: {} })
            .pipe(pluck('result'), retry(2), catchError(err => throwError({ errorText: 'Failed to download geoJSON file.' })));
    }
}
DataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DataService, deps: [{ token: i1$3.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
DataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DataService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.HttpClient }]; } });

class DashletModule {
    static forRoot(config) {
        return {
            ngModule: DashletModule,
            providers: [
                { provide: DATA_SERVICE, useClass: (config && config.dataService) || DataService }
            ]
        };
    }
}
DashletModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DashletModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DashletModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.3.0", ngImport: i0, type: DashletModule, declarations: [ChartJsComponent, DashletComponent, ReportWrapperDirective, BigNumberComponent, DtTableComponent, TemplateRefsDirective, FiltersComponent, MapComponent], imports: [HttpClientModule, ChartsModule, CommonModule, DataTablesModule, ReactiveFormsModule, NgMultiSelectDropDownModule, i4.NgxDaterangepickerMd], exports: [DashletComponent, TemplateRefsDirective] });
DashletModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DashletModule, imports: [HttpClientModule, ChartsModule, CommonModule, DataTablesModule, ReactiveFormsModule, NgMultiSelectDropDownModule,
        NgxDaterangepickerMd.forRoot()] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DashletModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ChartJsComponent, DashletComponent, ReportWrapperDirective, BigNumberComponent, DtTableComponent, TemplateRefsDirective, FiltersComponent, MapComponent],
                    imports: [HttpClientModule, ChartsModule, CommonModule, DataTablesModule, ReactiveFormsModule, NgMultiSelectDropDownModule,
                        NgxDaterangepickerMd.forRoot(),
                    ],
                    exports: [DashletComponent, TemplateRefsDirective]
                }]
        }] });

/*
 * Public API Surface of my-lib
 */

/**
 * Generated bundle index. Do not edit.
 */

var filterSchema = Joi.array().items(...[Joi.object({
        label: Joi.string().optional(),
        reference: Joi.string().required(),
        placeholder: Joi.string().optional(),
        controlType: Joi.string().valid(...["single-select", "multi-select", "date"]).required(),
        default: Joi.string().optional(),
        searchable: Joi.boolean().optional(),
        displayName: Joi.string().optional()
    })]);

const schema$6 = Joi.object({
    labelExpr: Joi.string(),
    labels: Joi.array().items(...[Joi.string(), Joi.number()]),
    datasets: Joi.array().items(...[Joi.object({
            label: Joi.string().required(),
            dataExpr: Joi.string(),
            data: Joi.array()
        }).options({
            allowUnknown: true
        }).xor("data", "dataExpr")]).required(),
    options: Joi.object().optional().options({ allowUnknown: true }),
    colors: Joi.alternatives(...[Joi.object(), Joi.array()]).optional(),
    filters: filterSchema.optional(),
    tooltip: Joi.object().optional(),
    responsive: Joi.boolean().optional().default(true),
    type: Joi.string().optional(),
    scales: Joi.object({
        axes: Joi.any().required()
    }).optional().options({ allowUnknown: true }),
    caption: Joi.object().optional().options({ allowUnknown: true })
}).xor("labelExpr", "labels");

var schema$7 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    schema: schema$6
});

const schema$4 = Joi.object({
    header: Joi.string().optional().allow(...[""]),
    footer: Joi.string().optional().allow(...[""]),
    dataExpr: Joi.string(),
    data: Joi.alternatives(...[Joi.string(), Joi.number()]),
    operation: Joi.string().valid(...["SUM", "MIN", "MAX", "AVG"]).optional()
}).xor("data", "dataExpr");

var schema$5 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    schema: schema$4
});

const schema$2 = Joi.object({
    filters: filterSchema.optional(),
    columnConfig: Joi.array().items({
        title: Joi.string().required(),
        data: Joi.string().required(),
        render: Joi.function().optional(),
        index: Joi.number().optional(),
        searchable: Joi.boolean().optional(),
        orderable: Joi.boolean().optional(),
        visible: Joi.boolean().optional(),
        autoWidth: Joi.boolean().optional(),
    }).required().options({ allowUnknown: true }),
    autoWidth: Joi.boolean().optional(),
    bLengthChange: Joi.boolean().optional(),
    paging: Joi.boolean().optional(),
    bFilter: Joi.boolean().optional(),
    bInfo: Joi.boolean().optional(),
    searchable: Joi.boolean().optional(),
    info: Joi.boolean().optional(),
    order: Joi.array().optional()
}).options({ allowUnknown: true });

var schema$3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    schema: schema$2
});

const schema = Joi.object({
    state: Joi.string(),
    districts: Joi.array().items(...[Joi.string()]),
    metrics: Joi.array().items(...[Joi.string()]).required(),
    folder: Joi.string().optional().default("geoJSONFiles"),
    labelExpr: Joi.string().required(),
    strict: Joi.boolean().optional().default(false),
    country: Joi.string(),
    states: Joi.array().items(...[Joi.string()]),
    initialCoordinate: Joi.array().length(2).items(...[Joi.string()]).optional(),
    latBounds: Joi.array().length(2).items(...[Joi.string()]).optional(),
    lonBounds: Joi.array().length(2).items(...[Joi.string()]).optional(),
    initialZoomLevel: Joi.alternatives(...[Joi.number, Joi.string()]).optional().default(5),
    controlTitle: Joi.string().optional().default("India Heat Map"),
    geoJSONMapping: Joi.object({
        type: Joi.string().required(),
        features: Joi.array().required()
    }).optional(),
    tileLayer: Joi.object({
        urlTemplate: Joi.string().required(),
        options: Joi.object({
            attributions: Joi.string().required()
        }).required().options({ allowUnknown: true })
    }).optional().options({ allowUnknown: true }),
    rootStyle: Joi.object().optional(),
    filters: filterSchema.optional(),
    omitMetrics: Joi.array().items(...[Joi.string()]).optional()
}).xor("state", "country").xor("districts", "states").and("state", "districts").and("country", "states");

var schema$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    schema: schema
});

export { BaseComponent, BigNumberComponent, CHART_DEFAULT_CONFIG, ChartJsComponent, ChartType, DASHLET_CONSTANTS, DATA_SERVICE, DEFAULT_CONFIG, DashletComponent, DashletModule, DataService, DtTableComponent, FILTER_DEFAULT_CONFIG, FeatureType, FiltersComponent, GeometryType, IReportType, MapComponent, ReportState, ReportWrapperDirective, TABLE_DEFAULT_CONFIG, TYPE_TO_COMPONENT_MAPPING, TableType, TemplateRefsDirective, constants, runAggregator };
//# sourceMappingURL=project-sunbird-sb-dashlet.mjs.map

import { __decorate, __param } from "tslib";
import { EventEmitter, Inject } from '@angular/core';
import { of, Subject } from 'rxjs';
import { ReportState } from '../../types/index';
import { tap } from 'rxjs/operators';
import { constants } from '../../tokens/constants';
import * as jsonexport from "jsonexport/dist";
const jsonExport = jsonexport;
import { pick } from 'lodash-es';
import { DATA_SERVICE } from '../../tokens/index';
let BaseComponent = class BaseComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.data = [];
        this._isInitialized = false;
        this.state = new EventEmitter();
        this.events = new EventEmitter();
        this.eventsSubject = new Subject();
    }
    fetchData(config) {
        const { values = null, location: { url = null, options = {}, method = 'GET' } = {} } = config || {};
        if (values)
            return of(values);
        if (!url)
            throw new Error('invalid input');
        this.state.emit(ReportState.PENDING);
        return this.dataService.fetchData({ method, url, options }).pipe(tap(_ => this.state.emit(ReportState.DONE)));
    }
    getConfigValue(key) {
        return this.config && this.config[key];
    }
    checkIfInitialized() {
        if (!this._isInitialized) {
            throw Error(constants.CHART_NOT_INITIALIZED);
        }
    }
    _downloadFile(url, filename) {
        var link = document.createElement("a");
        link.setAttribute("href", url);
        link.setAttribute("download", filename);
        link.click();
    }
    getCsv(data, options) {
        return new Promise((resolve, reject) => {
            jsonExport(data, options, (error, csv) => {
                if (!error && csv) {
                    resolve(csv);
                }
                else {
                    reject(error);
                }
            });
        });
    }
    async exportAsCsv(data, options) {
        const { columnsToPick = [], ...others } = options || {};
        const JSON = this.sortAndTransformData(data || this.data, { columnsToPick });
        try {
            const csv = await this.getCsv(JSON, others);
            var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            var url = URL.createObjectURL(blob);
            this._downloadFile(url, 'data.csv');
        }
        catch (error) {
            console.log(error);
        }
    }
    sortAndTransformData(rows, { columnsToPick = [] }) {
        if (!columnsToPick.length)
            return rows;
        return rows.map(row => {
            const defaultValue = columnsToPick.reduce((acc, val) => {
                acc[val] = undefined;
                return acc;
            }, {});
            return pick({ ...defaultValue, ...row }, columnsToPick);
        });
    }
};
BaseComponent = __decorate([
    __param(0, Inject(DATA_SERVICE))
], BaseComponent);
export { BaseComponent };
//# sourceMappingURL=data:application/json;base64,
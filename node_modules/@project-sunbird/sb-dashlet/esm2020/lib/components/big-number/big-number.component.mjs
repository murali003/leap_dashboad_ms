import { Component, Inject } from '@angular/core';
import { IReportType, ChartType, ReportState } from '../../types/index';
import { BaseComponent } from '../base/base.component';
import { DEFAULT_CONFIG as DEFAULT_CONFIG_TOKEN, DASHLET_CONSTANTS, DATA_SERVICE } from '../../tokens/index';
import { runAggregator } from './operations';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../filters/filters.component";
export class BigNumberComponent extends BaseComponent {
    constructor(dataService, defaultConfig, cdr, CONSTANTS) {
        super(dataService);
        this.dataService = dataService;
        this.cdr = cdr;
        this.CONSTANTS = CONSTANTS;
        this.reportType = IReportType.CHART;
        this.type = ChartType.BIG_NUMBER;
        this.inputParameters = {};
        this.exportOptions = ['csv'];
        this.bigNumberDataClosure = (dataExpr) => $aggregateFn => (data) => {
            return {
                getData(overriddenData) {
                    data = overriddenData || data;
                    return runAggregator($aggregateFn, data, dataExpr);
                },
                addData(newData) {
                    data = data.concat(newData);
                    return this.getData();
                }
            };
        };
        this._defaultConfig = defaultConfig;
    }
    async initialize({ config, data, type = "bigNumber" }) {
        if (!(config && data))
            throw new SyntaxError(this.CONSTANTS.INVALID_INPUT);
        this.config = config = { ...config, type };
        const fetchedJSON = this.data = await this.fetchData(data).toPromise().catch(err => []);
        this.builder(config, fetchedJSON);
        this._isInitialized = true;
        this.state.emit(ReportState.DONE);
    }
    builder(config, JSONData) {
        const { header = this._defaultConfig.header, footer = this._defaultConfig.footer, dataExpr, operation = this._defaultConfig.operation } = config;
        if (!dataExpr || !JSONData) {
            throw Error(this.CONSTANTS.INVALID_INPUT);
        }
        this._bigNumberClosure = this.bigNumberDataClosure(dataExpr)(operation)(JSONData);
        const bigNumberObj = { header, footer, data: this._bigNumberClosure.getData() };
        this.setBigNumberData(bigNumberObj);
    }
    setBigNumberData(config = {}) {
        this.inputParameters = { ...this._defaultConfig, ...this.inputParameters, ...config };
        this.$context = { data: this.data, config: this.config, inputParameters: this.inputParameters, exportOptions: this.exportOptions };
        this.cdr.detectChanges();
    }
    reset() {
        this.eventsSubject.next();
    }
    destroy() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    update(input) {
        this.checkIfInitialized();
        if (!input)
            throw new Error(this.CONSTANTS.INVALID_INPUT);
        const { config = {}, data = null } = input;
        const { header, footer, dataExpr, operation = 'SUM' } = config;
        let bigNumber;
        if (data) {
            this._bigNumberClosure = (dataExpr && this.bigNumberDataClosure(dataExpr)(operation)(data)) || this._bigNumberClosure;
            bigNumber = this._bigNumberClosure.getData(data);
        }
        this.setBigNumberData({
            ...(header && { header }),
            ...(footer && { footer }),
            ...(bigNumber && {
                data: bigNumber
            })
        });
    }
    addData(data) {
        if (!data)
            throw new Error(this.CONSTANTS.INVALID_INPUT);
        data = Array.isArray(data) ? data : [data];
        const bigNumber = this._bigNumberClosure.addData(data);
        this.setBigNumberData({
            data: bigNumber
        });
    }
    refreshChart() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    getTelemetry() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    exportAs(format) {
        if (!this.exportOptions.includes(format)) {
            throw new Error('given type not supported');
        }
        this.exportAsCsv();
    }
}
BigNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: BigNumberComponent, deps: [{ token: DATA_SERVICE }, { token: DEFAULT_CONFIG_TOKEN }, { token: i0.ChangeDetectorRef }, { token: DASHLET_CONSTANTS }], target: i0.ɵɵFactoryTarget.Component });
BigNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: BigNumberComponent, selector: "sb-big-number", providers: [
        {
            provide: DEFAULT_CONFIG_TOKEN,
            useValue: {
                header: '',
                footer: '',
                operation: 'SUM'
            }
        }
    ], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultTemplate let-config>\n  <div class=\"ui cards\">\n    <div class=\"card\">\n      <div class=\"content\">\n        <div class=\"header\">{{config?.inputParameters?.header}}</div>\n        <div class=\"meta\">{{config?.inputParameters?.footer}}</div>\n        <div class=\"description\">\n          {{config?.inputParameters?.data}}\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #defaultFilterTemplate let-context>\n  <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n    (filteredData)=\"update({data: $event})\" [resetFilters]=\"eventsSubject.asObservable()\">\n  </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"$context\" [ngTemplateOutlet]=\"templateRefs?.body || defaultTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i2.FiltersComponent, selector: "sb-dashlets-filters", inputs: ["config", "data", "resetFilters"], outputs: ["filteredData"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: BigNumberComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sb-big-number', providers: [
                        {
                            provide: DEFAULT_CONFIG_TOKEN,
                            useValue: {
                                header: '',
                                footer: '',
                                operation: 'SUM'
                            }
                        }
                    ], template: "<ng-template #defaultTemplate let-config>\n  <div class=\"ui cards\">\n    <div class=\"card\">\n      <div class=\"content\">\n        <div class=\"header\">{{config?.inputParameters?.header}}</div>\n        <div class=\"meta\">{{config?.inputParameters?.footer}}</div>\n        <div class=\"description\">\n          {{config?.inputParameters?.data}}\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #defaultFilterTemplate let-context>\n  <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n    (filteredData)=\"update({data: $event})\" [resetFilters]=\"eventsSubject.asObservable()\">\n  </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"$context\" [ngTemplateOutlet]=\"templateRefs?.body || defaultTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>" }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DATA_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DEFAULT_CONFIG_TOKEN]
                }] }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DASHLET_CONSTANTS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,
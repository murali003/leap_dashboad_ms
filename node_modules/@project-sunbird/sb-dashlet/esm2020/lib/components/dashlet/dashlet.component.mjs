import { Component, ContentChildren, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ReportWrapperDirective, TemplateRefsDirective } from '../../directives/index';
import { TYPE_TO_COMPONENT_MAPPING } from './type_to_component_mapping';
import { v4 as uuidv4 } from 'uuid';
import { defaultObjectSchemaAllowingAllKeys, validateInputAgainstSchema } from './schema';
import * as i0 from "@angular/core";
import * as i1 from "../../directives/reportWrapper/report-wrapper.directive";
const transformTemplates = (result, current) => {
    result[current.slot] = current.templateRef;
    return result;
};
export class DashletComponent {
    constructor(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.events = new EventEmitter();
        this._typeToComponentMapping = Object.freeze(TYPE_TO_COMPONENT_MAPPING);
    }
    get instance() {
        return this._componentInstance;
    }
    set instance(componentInstance) {
        this._componentInstance = componentInstance;
    }
    ngOnInit() {
        this.id = uuidv4();
    }
    ngOnChanges(changes) {
        if (this.type && this.config && this.data) {
            this.loadComponent(this.type).catch(err => {
                console.error(err);
                throw err;
            });
        }
    }
    async loadComponent(type) {
        const componentResolver = this._typeToComponentMapping && this._typeToComponentMapping[type];
        if (!componentResolver) {
            throw new Error('Given Type not supported');
        }
        const { componentPath, schemaPath = Promise.resolve(defaultObjectSchemaAllowingAllKeys) } = componentResolver;
        const schema = await schemaPath;
        const input = { data: this.data, config: this.config, type: this.type };
        const { error } = validateInputAgainstSchema(schema)(input);
        if (error) {
            throw new SyntaxError(error.message);
        }
        const component = await componentPath;
        this.reportWrapper.viewContainerRef.clear();
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        const componentRef = this.reportWrapper.viewContainerRef.createComponent(componentFactory);
        const instance = this.instance = componentRef.instance;
        if (this.templateRefs.length) {
            instance['templateRefs'] = this.templateRefs.toArray().reduce(transformTemplates, {});
        }
        instance.id = this.id;
        instance.initialize({ config: this.config, type: this.type, data: this.data });
        instance.state.subscribe(this._stateEventsHandler.bind(this));
        instance.events.subscribe(this._eventsHandler.bind(this));
    }
    _stateEventsHandler(event) {
        this.events.emit({ type: 'STATE', event });
    }
    _eventsHandler(event) {
        this.events.emit(event);
    }
    filter(filteredData) {
        this.instance.update({ data: filteredData });
    }
    reset() {
        this.instance.reset();
    }
}
DashletComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DashletComponent, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });
DashletComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: DashletComponent, selector: "sb-dashlet", inputs: { type: "type", config: "config", data: "data" }, outputs: { events: "events" }, queries: [{ propertyName: "templateRefs", predicate: TemplateRefsDirective }], viewQueries: [{ propertyName: "reportWrapper", first: true, predicate: ReportWrapperDirective, descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div>\n    <ng-template sbReportWrapper></ng-template>\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i1.ReportWrapperDirective, selector: "[sbReportWrapper]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DashletComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sb-dashlet', template: "<div>\n    <ng-template sbReportWrapper></ng-template>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; }, propDecorators: { type: [{
                type: Input
            }], config: [{
                type: Input
            }], data: [{
                type: Input
            }], events: [{
                type: Output
            }], reportWrapper: [{
                type: ViewChild,
                args: [ReportWrapperDirective, { static: true }]
            }], templateRefs: [{
                type: ContentChildren,
                args: [TemplateRefsDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,
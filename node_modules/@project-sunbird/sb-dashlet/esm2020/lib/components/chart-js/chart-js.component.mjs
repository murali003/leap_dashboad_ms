import { Component, Inject, ViewChild } from '@angular/core';
import { BaseChartDirective, ThemeService } from 'ng2-charts';
import { IReportType, ReportState } from '../../types/index';
import { BaseComponent } from '../base/base.component';
import { get, groupBy, mapValues, sumBy, remove } from 'lodash-es';
import { DEFAULT_CONFIG, DASHLET_CONSTANTS, DATA_SERVICE } from '../../tokens/index';
import { CHART_DEFAULT_CONFIG } from './defaultConfiguration';
import * as pluginAnnotation from 'chartjs-plugin-annotation';
import * as i0 from "@angular/core";
import * as i1 from "ng2-charts";
import * as i2 from "@angular/common";
import * as i3 from "../filters/filters.component";
/**
 * @dynamic
 */
export class ChartJsComponent extends BaseComponent {
    constructor(dataService, defaultConfig, CONSTANTS) {
        super(dataService);
        this.dataService = dataService;
        this.CONSTANTS = CONSTANTS;
        this.reportType = IReportType.CHART;
        this.inputParameters = {};
        this.exportOptions = ['png', 'csv', 'jpg'];
        this.barChartPlugins = [pluginAnnotation];
        this._defaultConfig = defaultConfig;
    }
    /**
     * @description initializes the component with the passed config and data
     * @param {InputParams} { config, type, data }
     * @return {*}  {Promise<any>}
     * @memberof ChartJsComponent
     */
    async initialize({ config, type, data }) {
        if (!(config && type && data))
            throw new SyntaxError(this.CONSTANTS.INVALID_INPUT);
        this.config = config = { ...config, type };
        const fetchedJSON = this.data = await this.fetchData(data).toPromise().catch(err => []);
        this.builder(config, fetchedJSON);
        this._isInitialized = true;
        this.state.emit(ReportState.DONE);
    }
    /**
     * @description It's a high order function responsible for getting labels and datasets, addition and removal of data.
     * @private
     * @param {string} labelExpr
     * @param {IDataset[]} datasets
     * @return {*}
     * @memberof ChartJsComponent
     */
    getLabelsAndDatasetsClosure(labelExpr, datasets) {
        return (data) => {
            const getDataGroupedByLabelExpr = data => groupBy(data, val => {
                const value = get(val, labelExpr);
                return value && typeof value === 'string' ? value.trim() : '';
            });
            const getLabels = (data) => Object.keys(data);
            const getDatasets = (data) => datasets.map(dataset => {
                return {
                    ...dataset,
                    ...(dataset.dataExpr && {
                        data: Object.values(mapValues(data, rows => sumBy(rows, row => +(row[dataset.dataExpr] || 0))))
                    })
                };
            });
            const findDataByLabelPredicate = (label) => (row) => row[labelExpr] === label;
            return {
                addData(newData) {
                    data = data.concat(newData);
                    return this.getData(data);
                },
                getData(overriddenData) {
                    data = overriddenData || data;
                    const groupedData = getDataGroupedByLabelExpr(data);
                    return {
                        labels: getLabels(groupedData),
                        datasets: getDatasets(groupedData)
                    };
                },
                removeData(label) {
                    remove(data, findDataByLabelPredicate(label));
                    return this.getData(data);
                }
            };
        };
    }
    /**
     * @description prepared the chart data using the configuration passed
     * @param {Partial<IChartOptions>} config
     * @param {*} data
     * @memberof ChartJsComponent
     */
    builder(config, data) {
        let { labels = [], labelExpr = null, type = null, legend = true, colors = [], datasets = [], options = {}, ...others } = config;
        options = { ...others, ...options };
        if (labelExpr) {
            this._labelsAndDatasetsClosure = this.getLabelsAndDatasetsClosure(labelExpr, datasets)(data);
            const { getData } = this._labelsAndDatasetsClosure;
            ({ labels, datasets } = getData());
        }
        else {
            datasets = datasets.map(dataset => {
                dataset.data = data.map(rec => rec[dataset.dataExpr]);
                return dataset;
            });
        }
        this.setChartData({ labels, datasets, options, type, legend, colors });
    }
    setChartData(config = {}) {
        this.inputParameters = { ...this._defaultConfig, ...this.inputParameters, ...config };
        this.$context = { data: this.data, config: this.config, inputParameters: this.inputParameters, exportOptions: this.exportOptions };
    }
    reset() {
        this.eventsSubject.next();
    }
    destroy() {
        get(this.baseChartDirective, 'chart.destroy') && this.baseChartDirective.chart.destroy();
    }
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @description updates the type, data or Dashlet configuration
     * @param {InputParams} input
     * @memberof ChartJsComponent
     */
    update(input) {
        this.checkIfInitialized();
        if (!input)
            throw new Error(this.CONSTANTS.INVALID_INPUT);
        const { type = null, config = {}, data = null } = input;
        let labels, datasets;
        if (data) {
            const { labelExpr, datasets: datasetsConfig } = config;
            if (labelExpr || datasets) {
                this._labelsAndDatasetsClosure = this.getLabelsAndDatasetsClosure(labelExpr || this.getConfigValue(labelExpr), datasetsConfig || this.getConfigValue(datasets))(data);
            }
            ({ labels, datasets } = this._labelsAndDatasetsClosure.getData(data));
        }
        this.setChartData({ ...config, ...(type && { type }), ...(labels && datasets && { labels, datasets }) });
        get(this.baseChartDirective, 'update') && this.baseChartDirective.update();
    }
    addData(data) {
        this.checkIfInitialized();
        if (!data)
            throw new Error(this.CONSTANTS.INVALID_INPUT);
        if (this._labelsAndDatasetsClosure) {
            data = Array.isArray(data) ? data : [data];
            const { labels, datasets } = this._labelsAndDatasetsClosure.addData(data);
            this.setChartData({ labels, datasets });
        }
    }
    refreshChart() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    /**
     * @description Removes data associated with a label
     * @param {string} label
     * @memberof ChartJsComponent
     */
    removeData(label) {
        this.checkIfInitialized();
        const { labels, datasets } = this._labelsAndDatasetsClosure.removeData(label);
        this.setChartData({ labels, datasets });
    }
    getTelemetry() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    getCurrentSelection() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    getDatasetAtIndex(index) {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    onChartClicked(event) {
        this.events.emit({
            type: 'CLICK',
            event
        });
    }
    onChartHovered(event) {
        this.events.emit({
            type: 'HOVER',
            event
        });
    }
    exportAsImage(format = 'jpg') {
        const dataUrl = document.getElementById(this.id).toDataURL(`image/${format}`, 1);
        const fileName = `image.${format}`;
        this._downloadFile(dataUrl, fileName);
    }
    exportAs(format) {
        if (!this.exportOptions.includes(format)) {
            throw new Error('given type not supported');
        }
        switch (format) {
            case 'csv': {
                this.exportAsCsv();
                break;
            }
            default: {
                this.exportAsImage(format);
                break;
            }
        }
    }
}
ChartJsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ChartJsComponent, deps: [{ token: DATA_SERVICE }, { token: DEFAULT_CONFIG }, { token: DASHLET_CONSTANTS }], target: i0.ɵɵFactoryTarget.Component });
ChartJsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: ChartJsComponent, selector: "sb-chart-js", providers: [
        ThemeService,
        {
            provide: DEFAULT_CONFIG,
            useValue: CHART_DEFAULT_CONFIG
        }
    ], viewQueries: [{ propertyName: "baseChartDirective", first: true, predicate: BaseChartDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultFilterTemplate let-context>\n  <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n    (filteredData)=\"update({data: $event})\" [resetFilters]=\"eventsSubject.asObservable()\">\n  </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<div *ngIf=\"$context?.inputParameters as data\">\n  <canvas [id]=\"id\" baseChart [width]=\"data.options.width ? data.options.width : '400'\" [height]=\"data.options.height ? data.options.height : '400'\" [datasets]=\"data?.datasets\" [labels]=\"data?.labels\"\n    [options]=\"data?.options\" [colors]=\"data?.colors\" [legend]=\"data?.legend\" [chartType]=\"data?.type\" [plugins]=\"barChartPlugins\"\n    (chartClick)=\"onChartClicked($event)\" (chartHover)=\"onChartHovered($event)\"></canvas>\n</div>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>", styles: [""], dependencies: [{ kind: "directive", type: i1.BaseChartDirective, selector: "canvas[baseChart]", inputs: ["options", "data", "datasets", "labels", "chartType", "colors", "legend", "plugins"], outputs: ["chartClick", "chartHover"], exportAs: ["base-chart"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i3.FiltersComponent, selector: "sb-dashlets-filters", inputs: ["config", "data", "resetFilters"], outputs: ["filteredData"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ChartJsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sb-chart-js', providers: [
                        ThemeService,
                        {
                            provide: DEFAULT_CONFIG,
                            useValue: CHART_DEFAULT_CONFIG
                        }
                    ], template: "<ng-template #defaultFilterTemplate let-context>\n  <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n    (filteredData)=\"update({data: $event})\" [resetFilters]=\"eventsSubject.asObservable()\">\n  </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<div *ngIf=\"$context?.inputParameters as data\">\n  <canvas [id]=\"id\" baseChart [width]=\"data.options.width ? data.options.width : '400'\" [height]=\"data.options.height ? data.options.height : '400'\" [datasets]=\"data?.datasets\" [labels]=\"data?.labels\"\n    [options]=\"data?.options\" [colors]=\"data?.colors\" [legend]=\"data?.legend\" [chartType]=\"data?.type\" [plugins]=\"barChartPlugins\"\n    (chartClick)=\"onChartClicked($event)\" (chartHover)=\"onChartHovered($event)\"></canvas>\n</div>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>" }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DATA_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DEFAULT_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DASHLET_CONSTANTS]
                }] }]; }, propDecorators: { baseChartDirective: [{
                type: ViewChild,
                args: [BaseChartDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,
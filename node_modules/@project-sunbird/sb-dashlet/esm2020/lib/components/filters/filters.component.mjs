import { Component, Input, Output, EventEmitter, Inject, ViewChild } from '@angular/core';
import { DEFAULT_CONFIG } from '../../tokens/index';
import * as _ from 'lodash-es';
import { debounceTime, distinctUntilChanged, takeUntil, map, tap, pairwise, startWith } from 'rxjs/operators';
import { Subject, zip } from 'rxjs';
import { FILTER_DEFAULT_CONFIG } from './defaultConfiguration';
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
import * as i3 from "ng-multiselect-dropdown";
import * as i4 from "ngx-daterangepicker-material";
dayjs.extend(customParseFormat);
const ranges = {
    'Today': [dayjs(), dayjs()],
    'Yesterday': [dayjs().subtract(1, 'day'), dayjs().subtract(1, 'day')],
    'Last 7 Days': [dayjs().subtract(6, 'day'), dayjs()],
    'Last 30 Days': [dayjs().subtract(29, 'day'), dayjs()],
    'This Month': [dayjs().startOf('month'), dayjs().endOf('month')],
    'Last Month': [dayjs().subtract(1, 'month').startOf('month'), dayjs().subtract(1, 'month').endOf('month')]
};
const sortDates = (dates, format = 'DD-MM-YYYY') => {
    return dates.sort((pre, next) => {
        const preDate = dayjs(pre, format), nextDate = dayjs(next, format);
        if (preDate.isSame(nextDate))
            return 0;
        if (preDate.isBefore(nextDate))
            return -1;
        return 1;
    });
};
export class FiltersComponent {
    constructor(fb, defaultConfig) {
        this.fb = fb;
        this.defaultConfig = defaultConfig;
        this.config = [];
        this.filteredData = new EventEmitter();
        this.unsubscribe$ = new Subject();
        this.ranges = ranges;
        this.locale = { applyLabel: 'Set Date', format: 'DD-MM-YYYY' };
        this._omitEmptyFilters = filters => _.omitBy(filters, _.isEmpty);
        this.transformFilterValues = filters => _.mapValues(filters, values => Array.isArray(values) ? values : [values]);
        this.getSelectedFiltersObservable = () => {
            return this.filtersFormGroup.valueChanges
                .pipe(takeUntil(this.unsubscribe$), debounceTime(1000), distinctUntilChanged(), map(this._omitEmptyFilters.bind(this)), map(this.transformFilterValues.bind(this)), startWith({}), pairwise());
        };
    }
    ngOnInit() {
        this._data = this.data;
        this.init(this.config, this._data);
        this.handleFilterValueChanges();
        this.resetFilters.subscribe(() => {
            this.filtersFormGroup.reset();
        });
    }
    _setDropdownSettings(config = {}) {
        return { ...this.defaultConfig.dropdownSettings, ...config };
    }
    _getFilterOptions(dataExpr, data) {
        const getFilterValue = dataExpr => row => (row && row[dataExpr]) || '';
        const inputDataArr = (data && Array.isArray(data) && data.map(getFilterValue(dataExpr))) || [];
        return _.compact(_.sortBy(_.uniq(inputDataArr)));
    }
    init(config, data) {
        this.filters = [];
        this.filtersFormGroup = this.fb.group({});
        config.forEach(filter => {
            const filterObj = { ...this.defaultConfig.config, ...filter };
            const { reference, default: defaultValue, searchable, controlType, dropdownSettings = {}, dateFormat } = filterObj;
            const options = this._getFilterOptions(reference, data);
            if (filter.controlType === 'date' || /date/i.test(reference)) {
                const sortedDateRange = sortDates([...options], dateFormat);
                filterObj['minDate'] = dayjs(sortedDateRange[0], dateFormat);
                filterObj['maxDate'] = dayjs(sortedDateRange[sortedDateRange.length - 1], dateFormat);
            }
            else {
                filterObj['dropdownSettings'] = this._setDropdownSettings({
                    singleSelection: controlType === 'single-select' ? true : false,
                    allowSearchFilter: searchable,
                    ...dropdownSettings
                });
            }
            filterObj.options = options;
            this.filtersFormGroup.addControl(reference, this.fb.control(defaultValue));
            this.filters.push(filterObj);
        });
    }
    handleFilterValueChanges() {
        const selectedFilters$ = this.getSelectedFiltersObservable();
        const filteredData$ = selectedFilters$.pipe(tap(console.log), map(([_, currentFilters]) => currentFilters), map(this.filterDataBySelectedFilters(this._data)));
        zip(selectedFilters$, filteredData$)
            .subscribe(([[previousFilters, currentFilters], filteredData]) => {
            _.forEach(this.filters, filter => {
                const { reference } = filter;
                const options = this._getFilterOptions(reference, filteredData);
                const referenceExistsInPreviousFilters = reference in previousFilters;
                const referenceExistsInCurrentFilters = reference in currentFilters;
                if (!referenceExistsInCurrentFilters || (referenceExistsInPreviousFilters && JSON.stringify(previousFilters[reference]) === JSON.stringify(currentFilters[reference]))) {
                    filter.options = options;
                    if (filter.controlType === 'date' || /date/i.test(reference)) {
                        const sortedDateRange = sortDates([...options], 'DD-MM-YYYY');
                        filter['minDate'] = dayjs(sortedDateRange[0], 'DD-MM-YYYY');
                        filter['maxDate'] = dayjs(sortedDateRange[sortedDateRange.length - 1], 'DD-MM-YYYY');
                    }
                }
            });
            this.filteredData.emit(filteredData);
        });
    }
    filterDataBySelectedFilters(JSON) {
        return selectedFilters => _.filter(JSON, data => {
            return _.every(selectedFilters, (values, key) => {
                if (data[key]) {
                    return _.some(values, value => _.trim(_.toLower(value)) === _.trim(_.toLower(data[key])));
                }
                return false;
            });
        });
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    updateDateRange({ startDate, endDate }, columnRef, dateFormat) {
        const selectedStartDate = dayjs(startDate).subtract(1, 'day');
        const selectedEndDate = dayjs(endDate).add(1, 'day');
        const dateRange = [];
        let currDate = dayjs(selectedStartDate).startOf('day');
        const lastDate = dayjs(selectedEndDate).startOf('day');
        while (currDate.diff(lastDate) < 0) {
            dateRange.push(currDate.clone().format(dateFormat));
            currDate = currDate.add(1, 'day');
        }
        this.filtersFormGroup.get(columnRef).setValue(dateRange);
    }
    reset() {
        this.filtersFormGroup.reset();
        if (this.datepicker) {
            this.datepicker.nativeElement.value = '';
        }
    }
}
FiltersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: FiltersComponent, deps: [{ token: i1.UntypedFormBuilder }, { token: DEFAULT_CONFIG }], target: i0.ɵɵFactoryTarget.Component });
FiltersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: FiltersComponent, selector: "sb-dashlets-filters", inputs: { config: "config", data: "data", resetFilters: "resetFilters" }, outputs: { filteredData: "filteredData" }, providers: [{
            provide: DEFAULT_CONFIG,
            useValue: FILTER_DEFAULT_CONFIG
        }], viewQueries: [{ propertyName: "datepicker", first: true, predicate: ["datePickerForFilters"], descendants: true }], ngImport: i0, template: "\n<ng-container *ngIf=\"filters?.length && filtersFormGroup\">\n    <form [formGroup]=\"filtersFormGroup\">\n        <div class=\"sb-filter-g\">\n                <ng-container *ngFor=\"let filter of filters\">\n                    <ng-container\n                        *ngIf=\"filter?.controlType === 'multi-select' || filter?.controlType === 'single-select'\">\n                        <ng-multiselect-dropdown class=\"sb-filter-g__item\"\n                            [placeholder]=\"filter?.placeholder || filter?.displayName || filter?.label\"\n                            [settings]=\"filter?.dropdownSettings\" [data]=\"filter?.options\"\n                            [formControlName]=\"filter.reference\">\n                        </ng-multiselect-dropdown>\n                    </ng-container>\n                    <ng-container *ngIf=\"filter?.controlType === 'date'\">\n                        <div class=\"sb-filter-g__item\">\n                            <input type=\"text\"\n                                [placeholder]=\"filter?.placeholder || filter?.displayName || filter?.label\"\n                                ngxDaterangepickerMd [minDate]=\"filter?.minDate\" [maxDate]=\"filter?.maxDate\"\n                                [ranges]=\"ranges\" [alwaysShowCalendars]=\"true\" [locale]=\"locale\"\n                                [linkedCalendars]=\"true\" [showCustomRangeLabel]=\"true\"\n                                (change)=\"updateDateRange($event,filter.reference, filter?.dateFormat)\"\n                                #datePickerForFilters />\n                        </div>\n                    </ng-container>\n                </ng-container>\n        </div>\n    </form>\n</ng-container>", styles: [".sb-filter-g{display:grid;grid-template-columns:repeat(auto-fill,minmax(250px,1fr));gap:.5rem}.sb-filter-g__item{margin-bottom:.5rem;display:block;--white: #fff;background-color:var(--white)}.sb-filter-g__item input{width:100%;border:1px solid #adadad;height:35px;border-radius:.25rem;padding-left:.75rem;color:#333}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i3.MultiSelectComponent, selector: "ng-multiselect-dropdown", inputs: ["disabled", "placeholder", "settings", "data"], outputs: ["onFilterChange", "onDropDownClose", "onSelect", "onDeSelect", "onSelectAll", "onDeSelectAll"] }, { kind: "directive", type: i4.DaterangepickerDirective, selector: "input[ngxDaterangepickerMd]", inputs: ["minDate", "maxDate", "autoApply", "alwaysShowCalendars", "showCustomRangeLabel", "linkedCalendars", "dateLimit", "singleDatePicker", "showWeekNumbers", "showISOWeekNumbers", "showDropdowns", "isInvalidDate", "isCustomDate", "isTooltipDate", "showClearButton", "customRangeDirection", "ranges", "opens", "drops", "firstMonthDayClass", "lastMonthDayClass", "emptyWeekRowClass", "emptyWeekColumnClass", "firstDayOfNextMonthClass", "lastDayOfPreviousMonthClass", "keepCalendarOpeningWithRange", "showRangeLabelOnInput", "showCancel", "lockStartDate", "timePicker", "timePicker24Hour", "timePickerIncrement", "timePickerSeconds", "closeOnAutoApply", "endKeyHolder", "startKey", "locale", "endKey"], outputs: ["change", "rangeClicked", "datesUpdated", "startDateChanged", "endDateChanged", "clearClicked"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: FiltersComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sb-dashlets-filters', providers: [{
                            provide: DEFAULT_CONFIG,
                            useValue: FILTER_DEFAULT_CONFIG
                        }], template: "\n<ng-container *ngIf=\"filters?.length && filtersFormGroup\">\n    <form [formGroup]=\"filtersFormGroup\">\n        <div class=\"sb-filter-g\">\n                <ng-container *ngFor=\"let filter of filters\">\n                    <ng-container\n                        *ngIf=\"filter?.controlType === 'multi-select' || filter?.controlType === 'single-select'\">\n                        <ng-multiselect-dropdown class=\"sb-filter-g__item\"\n                            [placeholder]=\"filter?.placeholder || filter?.displayName || filter?.label\"\n                            [settings]=\"filter?.dropdownSettings\" [data]=\"filter?.options\"\n                            [formControlName]=\"filter.reference\">\n                        </ng-multiselect-dropdown>\n                    </ng-container>\n                    <ng-container *ngIf=\"filter?.controlType === 'date'\">\n                        <div class=\"sb-filter-g__item\">\n                            <input type=\"text\"\n                                [placeholder]=\"filter?.placeholder || filter?.displayName || filter?.label\"\n                                ngxDaterangepickerMd [minDate]=\"filter?.minDate\" [maxDate]=\"filter?.maxDate\"\n                                [ranges]=\"ranges\" [alwaysShowCalendars]=\"true\" [locale]=\"locale\"\n                                [linkedCalendars]=\"true\" [showCustomRangeLabel]=\"true\"\n                                (change)=\"updateDateRange($event,filter.reference, filter?.dateFormat)\"\n                                #datePickerForFilters />\n                        </div>\n                    </ng-container>\n                </ng-container>\n        </div>\n    </form>\n</ng-container>", styles: [".sb-filter-g{display:grid;grid-template-columns:repeat(auto-fill,minmax(250px,1fr));gap:.5rem}.sb-filter-g__item{margin-bottom:.5rem;display:block;--white: #fff;background-color:var(--white)}.sb-filter-g__item input{width:100%;border:1px solid #adadad;height:35px;border-radius:.25rem;padding-left:.75rem;color:#333}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.UntypedFormBuilder }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DEFAULT_CONFIG]
                }] }]; }, propDecorators: { config: [{
                type: Input
            }], data: [{
                type: Input
            }], filteredData: [{
                type: Output
            }], resetFilters: [{
                type: Input
            }], datepicker: [{
                type: ViewChild,
                args: ['datePickerForFilters']
            }] } });
//# sourceMappingURL=data:application/json;base64,
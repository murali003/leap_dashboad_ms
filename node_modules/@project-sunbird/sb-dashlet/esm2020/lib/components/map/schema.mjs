import Joi from 'joi';
import filterSchema from '../filters/schema';
export const schema = Joi.object({
    state: Joi.string(),
    districts: Joi.array().items(...[Joi.string()]),
    metrics: Joi.array().items(...[Joi.string()]).required(),
    folder: Joi.string().optional().default("geoJSONFiles"),
    labelExpr: Joi.string().required(),
    strict: Joi.boolean().optional().default(false),
    country: Joi.string(),
    states: Joi.array().items(...[Joi.string()]),
    initialCoordinate: Joi.array().length(2).items(...[Joi.string()]).optional(),
    latBounds: Joi.array().length(2).items(...[Joi.string()]).optional(),
    lonBounds: Joi.array().length(2).items(...[Joi.string()]).optional(),
    initialZoomLevel: Joi.alternatives(...[Joi.number, Joi.string()]).optional().default(5),
    controlTitle: Joi.string().optional().default("India Heat Map"),
    geoJSONMapping: Joi.object({
        type: Joi.string().required(),
        features: Joi.array().required()
    }).optional(),
    tileLayer: Joi.object({
        urlTemplate: Joi.string().required(),
        options: Joi.object({
            attributions: Joi.string().required()
        }).required().options({ allowUnknown: true })
    }).optional().options({ allowUnknown: true }),
    rootStyle: Joi.object().optional(),
    filters: filterSchema.optional(),
    omitMetrics: Joi.array().items(...[Joi.string()]).optional()
}).xor("state", "country").xor("districts", "states").and("state", "districts").and("country", "states");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc2ItZGFzaGxldHMvc3JjL2xpYi9jb21wb25lbnRzL21hcC9zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxHQUFHLE1BQU0sS0FBSyxDQUFDO0FBQ3RCLE9BQU8sWUFBWSxNQUFNLG1CQUFtQixDQUFBO0FBRTVDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQzdCLEtBQUssRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO0lBQ25CLFNBQVMsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMvQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDeEQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDO0lBQ3ZELFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2xDLE1BQU0sRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUMvQyxPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRTtJQUNyQixNQUFNLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDNUMsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFO0lBQzVFLFNBQVMsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDcEUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUNwRSxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN2RixZQUFZLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvRCxjQUFjLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUN2QixJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUM3QixRQUFRLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRTtLQUNuQyxDQUFDLENBQUMsUUFBUSxFQUFFO0lBQ2IsU0FBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDbEIsV0FBVyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFDcEMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDaEIsWUFBWSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7U0FDeEMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsQ0FBQztLQUNoRCxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzdDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2xDLE9BQU8sRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFO0lBQ2hDLFdBQVcsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtDQUMvRCxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKb2kgZnJvbSAnam9pJztcbmltcG9ydCBmaWx0ZXJTY2hlbWEgZnJvbSAnLi4vZmlsdGVycy9zY2hlbWEnXG5cbmV4cG9ydCBjb25zdCBzY2hlbWEgPSBKb2kub2JqZWN0KHtcbiAgICBzdGF0ZTogSm9pLnN0cmluZygpLFxuICAgIGRpc3RyaWN0czogSm9pLmFycmF5KCkuaXRlbXMoLi4uW0pvaS5zdHJpbmcoKV0pLFxuICAgIG1ldHJpY3M6IEpvaS5hcnJheSgpLml0ZW1zKC4uLltKb2kuc3RyaW5nKCldKS5yZXF1aXJlZCgpLFxuICAgIGZvbGRlcjogSm9pLnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImdlb0pTT05GaWxlc1wiKSxcbiAgICBsYWJlbEV4cHI6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICAgIHN0cmljdDogSm9pLmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLFxuICAgIGNvdW50cnk6IEpvaS5zdHJpbmcoKSxcbiAgICBzdGF0ZXM6IEpvaS5hcnJheSgpLml0ZW1zKC4uLltKb2kuc3RyaW5nKCldKSxcbiAgICBpbml0aWFsQ29vcmRpbmF0ZTogSm9pLmFycmF5KCkubGVuZ3RoKDIpLml0ZW1zKC4uLltKb2kuc3RyaW5nKCldKS5vcHRpb25hbCgpLFxuICAgIGxhdEJvdW5kczogSm9pLmFycmF5KCkubGVuZ3RoKDIpLml0ZW1zKC4uLltKb2kuc3RyaW5nKCldKS5vcHRpb25hbCgpLFxuICAgIGxvbkJvdW5kczogSm9pLmFycmF5KCkubGVuZ3RoKDIpLml0ZW1zKC4uLltKb2kuc3RyaW5nKCldKS5vcHRpb25hbCgpLFxuICAgIGluaXRpYWxab29tTGV2ZWw6IEpvaS5hbHRlcm5hdGl2ZXMoLi4uW0pvaS5udW1iZXIsIEpvaS5zdHJpbmcoKV0pLm9wdGlvbmFsKCkuZGVmYXVsdCg1KSxcbiAgICBjb250cm9sVGl0bGU6IEpvaS5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJJbmRpYSBIZWF0IE1hcFwiKSxcbiAgICBnZW9KU09OTWFwcGluZzogSm9pLm9iamVjdCh7XG4gICAgICAgIHR5cGU6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICAgICAgICBmZWF0dXJlczogSm9pLmFycmF5KCkucmVxdWlyZWQoKVxuICAgIH0pLm9wdGlvbmFsKCksXG4gICAgdGlsZUxheWVyOiBKb2kub2JqZWN0KHtcbiAgICAgICAgdXJsVGVtcGxhdGU6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICAgICAgICBvcHRpb25zOiBKb2kub2JqZWN0KHtcbiAgICAgICAgICAgIGF0dHJpYnV0aW9uczogSm9pLnN0cmluZygpLnJlcXVpcmVkKClcbiAgICAgICAgfSkucmVxdWlyZWQoKS5vcHRpb25zKHsgYWxsb3dVbmtub3duOiB0cnVlIH0pXG4gICAgfSkub3B0aW9uYWwoKS5vcHRpb25zKHsgYWxsb3dVbmtub3duOiB0cnVlIH0pLFxuICAgIHJvb3RTdHlsZTogSm9pLm9iamVjdCgpLm9wdGlvbmFsKCksXG4gICAgZmlsdGVyczogZmlsdGVyU2NoZW1hLm9wdGlvbmFsKCksXG4gICAgb21pdE1ldHJpY3M6IEpvaS5hcnJheSgpLml0ZW1zKC4uLltKb2kuc3RyaW5nKCldKS5vcHRpb25hbCgpXG59KS54b3IoXCJzdGF0ZVwiLCBcImNvdW50cnlcIikueG9yKFwiZGlzdHJpY3RzXCIsIFwic3RhdGVzXCIpLmFuZChcInN0YXRlXCIsIFwiZGlzdHJpY3RzXCIpLmFuZChcImNvdW50cnlcIiwgXCJzdGF0ZXNcIik7Il19
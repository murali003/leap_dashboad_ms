import { Component, Inject, ViewChild } from '@angular/core';
import { IReportType, ChartType, ReportState } from '../../types/index';
import { BaseComponent } from '../base/base.component';
import { DEFAULT_CONFIG as DEFAULT_CONFIG_TOKEN, DASHLET_CONSTANTS, DATA_SERVICE } from '../../tokens/index';
import { __defaultConfig } from './defaultConfiguration';
import { cloneDeep, toLower, find, groupBy, reduce, omit } from 'lodash-es';
import * as geoJSONMapping from './geoJSONDataMapping.json';
import { catchError, skipWhile, tap, map, switchMap } from 'rxjs/operators';
import { BehaviorSubject, of, throwError } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../filters/filters.component";
/**
 * @dynamic
 */
export class MapComponent extends BaseComponent {
    constructor(dataService, defaultConfig, CONSTANTS) {
        super(dataService);
        this.dataService = dataService;
        this.CONSTANTS = CONSTANTS;
        this.reportType = IReportType.CHART;
        this.type = ChartType.MAP;
        this.inputParameters = {};
        this.exportOptions = ['csv'];
        this.getGeoJSON = new BehaviorSubject(undefined);
        this.mappingConfig = geoJSONMapping.default;
        this._defaultConfig = defaultConfig;
    }
    set mapContainer(element) {
        if (!element)
            return;
        if (this.inputParameters) {
            this.mapClosure = this._mapClosure(this.inputParameters);
            this.getGeoJSON.next({ ...this.inputParameters, reportData: this.data });
        }
    }
    async initialize({ config, data, type = ChartType.MAP }) {
        if (!(config && data))
            throw new SyntaxError(this.CONSTANTS.INVALID_INPUT);
        this.config = config = { ...config, type };
        const fetchedJSON = this.data = await this.fetchData(data).toPromise().catch(err => []);
        this.builder(config, fetchedJSON);
        this._isInitialized = true;
        this.state.emit(ReportState.DONE);
    }
    _setMapOptions(config = {}) {
        this.inputParameters = { ...this._defaultConfig, ...this.inputParameters, ...this.config, ...config };
        this.$context = { data: this.data, config: this.config, inputParameters: this.inputParameters, exportOptions: this.exportOptions };
    }
    _mapClosure(config = {}) {
        const { initialCoordinate, initialZoomLevel, latBounds, lonBounds, mapId = this.id } = config;
        const map = L && L.map(mapId).setView(initialCoordinate, initialZoomLevel);
        const geoJSONLayer = map && (L && L.geoJSON(null, {
            style: this.setStyle.bind(this),
            onEachFeature: this.onEachFeature.bind(this)
        }));
        const maxBounds = L && L.latLngBounds([latBounds, lonBounds]);
        map.setMaxBounds(maxBounds);
        const { urlTemplate, options } = config.tileLayer;
        const controlObject = this.getControlObject();
        L && map && L.tileLayer(urlTemplate, options).addTo(map);
        geoJSONLayer && geoJSONLayer.addTo(map);
        controlObject && controlObject.addTo(map);
        return {
            get map() {
                return map;
            },
            get geoJSONLayer() { return geoJSONLayer; },
            set geoJSONLayers(data) {
                if (geoJSONLayer && map) {
                    geoJSONLayer.addData(data);
                    const bounds = geoJSONLayer.getBounds();
                    map.fitBounds(bounds);
                }
            },
            resetLayers() {
                geoJSONLayer && geoJSONLayer.clearLayers();
            },
            updatePropertiesInsideInfoControl(properties) {
                controlObject && controlObject.update(properties);
            }
        };
    }
    async builder(config, _) {
        this._setMapOptions(config);
        // geoJSON mapping can be overridden by passing in the config
        if (config.geoJSONMapping) {
            this.mappingConfig = config.geoJSONMapping;
        }
        this.getGeoJSON.pipe(skipWhile(input => input === undefined || input === null || !(input.hasOwnProperty('state') || input.hasOwnProperty('country'))), switchMap(input => {
            const { country, states, state, districts, metrics, labelExpr, strict, folder, reportData = [], omitMetrics = [] } = input;
            let paramter;
            if (country) {
                paramter = { type: 'country', name: country };
            }
            else {
                paramter = { type: 'state', name: state };
            }
            const { geoJSONFilename = null } = this.findRecordInConfigMapping(paramter) || {};
            if (!geoJSONFilename) {
                return throwError('specified geoJSON file not found');
            }
            return this.getGeoJSONFile({ fileName: geoJSONFilename, folder }).pipe(map(geoJSONData => {
                const { type, features = [] } = cloneDeep(geoJSONData);
                let filteredFeatures;
                if (country && states.length) {
                    filteredFeatures = this.addProperties({ reportData, layers: states, labelExpr, type: 'state', features, metrics, omitMetrics });
                }
                else {
                    filteredFeatures = this.addProperties({ reportData, layers: districts, labelExpr, type: 'district', features, metrics, omitMetrics });
                }
                return { type, features: strict ? filteredFeatures : features };
            }, catchError(err => {
                return of({
                    type: 'FeatureCollection',
                    features: []
                });
            })));
        }), tap((geoJSONLayers) => {
            if (this.mapClosure) {
                this.mapClosure.geoJSONLayers = geoJSONLayers;
            }
        })).subscribe();
    }
    reset() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    destroy() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    update(input) {
        this.checkIfInitialized();
        if (!input)
            throw new Error(this.CONSTANTS.INVALID_INPUT);
        if (this.mapClosure) {
            const { data = null, config = {} } = input;
            this._setMapOptions(config);
            if (this.inputParameters && data) {
                this.mapClosure.resetLayers();
                this.getGeoJSON.next({ ...this.inputParameters, strict: true, reportData: data });
            }
        }
    }
    addData(data) {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    refreshChart() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    getTelemetry() {
        throw new Error(this.CONSTANTS.METHOD_NOT_IMPLEMENTED);
    }
    exportAs(format) {
        if (!this.exportOptions.includes(format)) {
            throw new Error('given type not supported');
        }
        this.exportAsCsv();
    }
    /**
     * @description click handler for a specfic layer within the map
     * @private
     * @param {*} { properties, metaData }
     * @param {*} event
     * @memberof Map2Component
     */
    clickHandler({ properties = {}, metaData = {} }, event) {
        console.log({ ...properties, ...metaData });
        this.events.emit({
            type: 'CLICK',
            event: {
                ...metaData, ...properties
            }
        });
    }
    /**
     * @description handles mouse out event for a specific layer
     * @private
     * @param {*} { properties, metaData }
     * @param {*} event
     * @memberof Map2Component
     */
    mouseoutHandler({ properties = {}, metaData = {} }, event) {
        if (this.mapClosure) {
            this.mapClosure.geoJSONLayer.resetStyle(event.target);
        }
    }
    /**
     * @description mouseover event handler
     * @private
     * @param {*} { properties, metaData }
     * @param {*} event
     * @memberof Map2Component
     */
    mouseoverHandler({ properties = {}, metaData = {} }, event) {
        const layer = event.target;
        layer.setStyle({
            weight: 3,
            color: '#666',
            dashArray: '',
            fillOpacity: 0.8
        });
        if (L && (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge)) {
            layer.bringToFront();
        }
        this.mapClosure && this.mapClosure.updatePropertiesInsideInfoControl(properties);
        const mergedObj = { ...properties, ...metaData };
        this.events.emit({
            type: 'HOVER',
            event: {
                ...mergedObj
            }
        });
        layer.bindPopup(mergedObj.name || 'Unknown').openPopup();
    }
    /**
     * @description attaches event handlers on each layer
     * @private
     * @param {*} feature
     * @param {*} layer
     * @memberof Map2Component
     */
    onEachFeature(feature, layer) {
        const { properties, metaData = {} } = feature;
        layer.on({
            mouseover: this.mouseoverHandler.bind(this, { properties, metaData }),
            mouseout: this.mouseoutHandler.bind(this, { properties, metaData }),
            click: this.clickHandler.bind(this, { properties, metaData })
        });
    }
    getControlObject() {
        const { controlTitle } = this.inputParameters;
        const infoControl = L && L.control();
        infoControl.onAdd = function (map) {
            this._div = L && L.DomUtil.create('div', 'infoControl');
            this.update();
            return this._div;
        };
        infoControl.update = function (properties = {}) {
            const text = Object.entries(properties).map(([key, value]) => `<br />${key}: ${value}`).join('<br />');
            this._div.innerHTML = `<h4>${controlTitle}</h4>
      ${text}`;
        };
        return infoControl;
    }
    /**
     * @description sets styles for each feature layer
     * @private
     * @param {*} feature
     * @returns
     * @memberof MapComponent
     */
    setStyle(feature, layer) {
        const { metaData = {} } = feature;
        return {
            ...this.inputParameters['rootStyle'], ...(!metaData.drillDown && !metaData.fileName &&
                { className: 'notAllowedCursor' })
        };
    }
    /**
   * @description dynamically add custom properties from external JSON to feature Objects
   * @private
   * @param {*} { reportData = [], layers = [], labelExpr = 'District', type = 'district', features = [], metrics = [] }
   * @returns
   * @memberof MapComponent
   */
    addProperties({ reportData = [], layers = [], labelExpr = 'District', type = 'district', features = [], metrics = [], omitMetrics = [] }) {
        const filteredFeatures = [];
        const datasets = groupBy(reportData || [], data => toLower(data[labelExpr]));
        layers.forEach(layer => {
            const recordFromConfigMapping = this.findRecordInConfigMapping({ type, name: layer });
            const dataset = datasets.hasOwnProperty(toLower(layer)) && datasets[toLower(layer)];
            const featureObj = features.find(feature => {
                const { properties = {} } = feature;
                return recordFromConfigMapping && +properties.code === +recordFromConfigMapping.code;
            });
            if (!recordFromConfigMapping || !dataset || !featureObj) {
                return;
            }
            featureObj['metaData'] = { name: layer };
            const result = reduce(dataset, (accumulator, value) => {
                metrics.forEach(metric => {
                    accumulator[metric] = (accumulator[metric] || 0) + (+value[metric]);
                });
                return accumulator;
            }, {});
            featureObj.properties = omit({
                ...(featureObj.properties || {}),
                ...(result || {})
            }, omitMetrics);
            filteredFeatures.push(featureObj);
        });
        return filteredFeatures;
    }
    findRecordInConfigMapping({ type = null, name = null, code = null }) {
        return find(this.mappingConfig, config => {
            const { type: configType, name: configName, code: configCode } = config;
            if (code) {
                return configCode === code;
            }
            return configType && configName && toLower(configType) === toLower(type) && toLower(configName) === toLower(name);
        });
    }
    getGeoJSONFile({ folder = 'geoJSONFiles', fileName }) {
        return this.dataService.fetchGeoJSONFile(`${folder}/${fileName}`);
    }
}
MapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: MapComponent, deps: [{ token: DATA_SERVICE }, { token: DEFAULT_CONFIG_TOKEN }, { token: DASHLET_CONSTANTS }], target: i0.ɵɵFactoryTarget.Component });
MapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: MapComponent, selector: "sb-map", providers: [
        {
            provide: DEFAULT_CONFIG_TOKEN,
            useValue: __defaultConfig
        }
    ], viewQueries: [{ propertyName: "mapContainer", first: true, predicate: ["map"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultFilterTemplate let-context>\n    <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n        (filteredData)=\"update({data: $event})\">\n    </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n    [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n    [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"$context?.inputParameters\">\n    <div [attr.id]=\"id\" class=\"mapContainer\" #map></div>\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n    [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>", styles: [".mapContainer{height:800px}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i2.FiltersComponent, selector: "sb-dashlets-filters", inputs: ["config", "data", "resetFilters"], outputs: ["filteredData"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: MapComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sb-map', providers: [
                        {
                            provide: DEFAULT_CONFIG_TOKEN,
                            useValue: __defaultConfig
                        }
                    ], template: "<ng-template #defaultFilterTemplate let-context>\n    <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n        (filteredData)=\"update({data: $event})\">\n    </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n    [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n    [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"$context?.inputParameters\">\n    <div [attr.id]=\"id\" class=\"mapContainer\" #map></div>\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n    [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>", styles: [".mapContainer{height:800px}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DATA_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DEFAULT_CONFIG_TOKEN]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DASHLET_CONSTANTS]
                }] }]; }, propDecorators: { mapContainer: [{
                type: ViewChild,
                args: ['map']
            }] } });
//# sourceMappingURL=data:application/json;base64,
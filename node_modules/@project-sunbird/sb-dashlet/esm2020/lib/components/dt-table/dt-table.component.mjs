import { Component, Inject, ViewChild } from '@angular/core';
import { DataTableDirective } from 'angular-datatables';
import { DASHLET_CONSTANTS, DATA_SERVICE, DEFAULT_CONFIG } from '../../tokens/index';
import { IReportType, ReportState } from '../../types/index';
import { BaseComponent } from '../base/base.component';
import { TABLE_DEFAULT_CONFIG } from './defaultConfiguration';
import * as jsonexport from "jsonexport/dist";
import { sortBy, map, get, omitBy } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "angular-datatables";
import * as i3 from "../filters/filters.component";
const jsonExport = jsonexport;
export class DtTableComponent extends BaseComponent {
    constructor(dataService, defaultConfig, CONSTANTS) {
        super(dataService);
        this.dataService = dataService;
        this.CONSTANTS = CONSTANTS;
        this.reportType = IReportType.TABLE;
        this.inputParameters = {};
        this.exportOptions = ['csv'];
        this.rowClickHandler = (row, data, index) => {
            const self = this;
            $('td', row).off('click');
            $('td', row).on('click', () => {
                this.events.emit({
                    type: 'CLICK',
                    event: data
                });
            });
            return row;
        };
        this._addDefaultToColumn = column => {
            return { ...this._defaultConfig['columnConfig'], ...column };
        };
        this._defaultConfig = defaultConfig;
    }
    set dataTableElement(element) {
        if (!element)
            return;
        this._dtClosure = this._tableOpsClosure(element && element['dtInstance']);
    }
    async initialize({ config, type, data }) {
        if (!(config && type && data))
            throw new SyntaxError(this.CONSTANTS.INVALID_INPUT);
        this.config = config = { ...config, type };
        const fetchedJSON = this.data = await this.fetchData(data).toPromise().catch(err => []);
        this.builder(config, fetchedJSON);
        this._isInitialized = true;
        this.state.emit(ReportState.DONE);
    }
    builder(config, data) {
        const { columnConfig, ...others } = config;
        const columns = columnConfig.map(this._addDefaultToColumn);
        const columnsSortedByIndex = sortBy(columns, ['index']);
        this._setTableOptions({
            ...others,
            data,
            columns: columnsSortedByIndex,
            rowCallback: this.rowClickHandler.bind(this)
        });
    }
    _setTableOptions(config = {}) {
        this.inputParameters = {
            ...this._defaultConfig['tableLevelConfig'],
            ...this.inputParameters,
            ...config
        };
        this.$context = { data: this.data, config: this.config, inputParameters: this.inputParameters, exportOptions: this.exportOptions, reset: false };
    }
    getRowsCount() {
        return this._dtClosure && this._dtClosure.rowsCount();
    }
    // resets to the original state.
    reset() {
        this.eventsSubject.next();
        this._dtClosure.updateData(this.data);
    }
    destroy() {
        const { destroy } = this._dtClosure;
        if (destroy && typeof destroy === 'function') {
            try {
                destroy.call(this._dtClosure);
            }
            catch (err) {
                console.error('component not destroyed', err);
            }
        }
    }
    update(input) {
        this.checkIfInitialized();
        if (!input)
            throw new Error(this.CONSTANTS.INVALID_INPUT);
        const { config = {}, data = null } = input;
        const { columnConfig: columns, ...others } = config;
        if (data && this._dtClosure) {
            this._dtClosure.updateData(data);
        }
        this._setTableOptions({
            ...others,
            ...(data && { data }),
            ...(columns && { columns })
        });
    }
    ;
    addRows(data) {
        this.addData(data);
    }
    getRowAtIndex(index) {
        const { getRowAtIndex } = this._dtClosure;
        if (getRowAtIndex) {
            return getRowAtIndex.bind(this._dtClosure, index);
        }
    }
    async removeRow(index) {
        const data = await this._dtClosure.getData();
        data.splice(index, 1);
        await this._dtClosure.updateData(data);
    }
    addData(data) {
        const { addData } = this._dtClosure;
        if (addData && typeof addData === 'function') {
            try {
                addData.call(this._dtClosure, data);
            }
            catch (error) {
                console.error('addition of data failed', error);
            }
        }
    }
    _tableOpsClosure(tableInstance) {
        return {
            get instance() {
                return tableInstance;
            },
            async addData(data) {
                const instance = await this.instance;
                instance.row.add(data);
                instance.draw();
            },
            async draw() {
                const instance = await this.instance;
                instance.draw();
                return instance;
            },
            async destroy() {
                const instance = await this.instance;
                instance.destroy();
                return instance;
            },
            async updateData(data) {
                const instance = await this.instance;
                instance.clear();
                instance.rows.add(data);
                instance.draw();
            },
            async rowsCount() {
                const instance = await this.instance;
                return instance.rows().count();
            },
            async getData() {
                const instance = await this.instance;
                return instance.rows().data();
            },
            async getRowAtIndex(index) {
                const data = await this.getData();
                return data[index];
            }
        };
    }
    _getColumnsForStrictMode() {
        const columnsConfig = get(this.config, 'columnConfig');
        const columnsSortedByIndex = sortBy(columnsConfig, 'index');
        const omitHiddenColumns = omitBy(columnsSortedByIndex, col => get(col, 'visible') === false);
        return omitHiddenColumns;
    }
    // Returns the csv string for the mobile platform
    async exportCsv(options = {}) {
        let JSON = await this._dtClosure.getData();
        if (options && options['strict']) {
            const columnsConfig = this._getColumnsForStrictMode();
            const columnsToPick = map(columnsConfig, 'data');
            const headersMapping = map(columnsConfig, 'title');
            options['rename'] = headersMapping;
            JSON = this.sortAndTransformData(JSON || this.data, { columnsToPick });
        }
        return this.getCsv((JSON && JSON.toArray()) || this.data, options);
    }
    async exportAs(format, options = {}) {
        if (!this.exportOptions.includes(format)) {
            throw new Error('given type not supported');
        }
        const data = await this._dtClosure.getData();
        switch (format) {
            case 'csv': {
                if (options && options['strict']) {
                    const columnsConfig = this._getColumnsForStrictMode();
                    const headersMapping = map(columnsConfig, 'title');
                    const columnsToPick = map(columnsConfig, 'data');
                    options['rename'] = headersMapping;
                    options['columnsToPick'] = columnsToPick;
                }
                this.exportAsCsv(data && data.toArray(), options);
                break;
            }
        }
    }
}
DtTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DtTableComponent, deps: [{ token: DATA_SERVICE }, { token: DEFAULT_CONFIG }, { token: DASHLET_CONSTANTS }], target: i0.ɵɵFactoryTarget.Component });
DtTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: DtTableComponent, selector: "sb-dt-table", providers: [
        {
            provide: DEFAULT_CONFIG,
            useValue: TABLE_DEFAULT_CONFIG
        }
    ], viewQueries: [{ propertyName: "dataTableElement", first: true, predicate: DataTableDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultFilterTemplate let-context>\n  <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n    (filteredData)=\"update({data: $event})\"  [resetFilters]=\"eventsSubject.asObservable()\">\n  </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"$context?.inputParameters\">\n  <table datatable [dtOptions]=\"$context?.inputParameters\" class=\"row-border hover\"></table>\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.DataTableDirective, selector: "[datatable]", inputs: ["dtOptions", "dtTrigger"] }, { kind: "component", type: i3.FiltersComponent, selector: "sb-dashlets-filters", inputs: ["config", "data", "resetFilters"], outputs: ["filteredData"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DtTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sb-dt-table', providers: [
                        {
                            provide: DEFAULT_CONFIG,
                            useValue: TABLE_DEFAULT_CONFIG
                        }
                    ], template: "<ng-template #defaultFilterTemplate let-context>\n  <sb-dashlets-filters [data]=\"context?.data\" [config]=\"context?.config?.filters\"\n    (filteredData)=\"update({data: $event})\"  [resetFilters]=\"eventsSubject.asObservable()\">\n  </sb-dashlets-filters>\n</ng-template>\n\n<ng-container *ngIf=\"$context?.config?.filters\" [ngTemplateOutlet]=\"templateRefs?.filter || defaultFilterTemplate\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.header && $context\" [ngTemplateOutlet]=\"templateRefs?.header\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>\n\n<ng-container *ngIf=\"$context?.inputParameters\">\n  <table datatable [dtOptions]=\"$context?.inputParameters\" class=\"row-border hover\"></table>\n</ng-container>\n\n<ng-container *ngIf=\"templateRefs?.footer && $context\" [ngTemplateOutlet]=\"templateRefs?.footer\"\n  [ngTemplateOutletContext]=\"{'$implicit': $context}\">\n</ng-container>" }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DATA_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DEFAULT_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DASHLET_CONSTANTS]
                }] }]; }, propDecorators: { dataTableElement: [{
                type: ViewChild,
                args: [DataTableDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { of, throwError } from 'rxjs';
import { catchError, pluck, retry, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class DataService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.cachedData = new Map();
    }
    /**
     * @description fetches the dataSources using the api configuration
     * @param {apiConfig} config
     * @return {*}
     * @memberof DataService
     */
    fetchData(config) {
        const stringifiedConfig = JSON.stringify(config);
        if (this.cachedData.has(stringifiedConfig))
            return of(this.cachedData.get(stringifiedConfig));
        const { method, url, options } = config;
        return this.httpClient.request(method, url, options).pipe(tap(response => {
            this.cachedData.set(stringifiedConfig, response);
        }));
    }
    /**
     * @description method is used to fetch the geoJSON files. Can be overridden by the client to use the necessary endpoint
     * @param {string} path
     * @return {*}
     * @memberof DataService
     */
    fetchGeoJSONFile(path) {
        return this.fetchData({ method: 'GET', url: `/reports/fetch/${path}`, options: {} })
            .pipe(pluck('result'), retry(2), catchError(err => throwError({ errorText: 'Failed to download geoJSON file.' })));
    }
}
DataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DataService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
DataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DataService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc2ItZGFzaGxldHMvc3JjL2xpYi9zZXJ2aWNlcy9kYXRhL2RhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBVy9ELE1BQU0sT0FBTyxXQUFXO0lBRXRCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFFbEMsZUFBVSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFGZSxDQUFDO0lBSS9DOzs7OztPQUtHO0lBQ0gsU0FBUyxDQUFDLE1BQWlCO1FBQ3pCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqRCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQzlGLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUN2RCxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDYixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUNEOzs7OztPQUtHO0lBQ0gsZ0JBQWdCLENBQUMsSUFBWTtRQUMzQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDO2FBQ2pGLElBQUksQ0FDSCxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQ2YsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUNSLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxrQ0FBa0MsRUFBRSxDQUFDLENBQUMsQ0FDakYsQ0FBQztJQUNOLENBQUM7O3dHQW5DVSxXQUFXOzRHQUFYLFdBQVcsY0FGVixNQUFNOzJGQUVQLFdBQVc7a0JBSHZCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG9mLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBwbHVjaywgcmV0cnksIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IElBcGlDb25maWcsIElEYXRhU2VydmljZSB9IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4JztcblxudHlwZSBhcGlDb25maWcgPSB7XG4gIG1ldGhvZDogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbiAgb3B0aW9uczogUGFydGlhbDxJQXBpQ29uZmlnPlxufVxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRGF0YVNlcnZpY2UgaW1wbGVtZW50cyBJRGF0YVNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkgeyB9XG5cbiAgcHJpdmF0ZSBjYWNoZWREYXRhID0gbmV3IE1hcCgpO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gZmV0Y2hlcyB0aGUgZGF0YVNvdXJjZXMgdXNpbmcgdGhlIGFwaSBjb25maWd1cmF0aW9uXG4gICAqIEBwYXJhbSB7YXBpQ29uZmlnfSBjb25maWdcbiAgICogQHJldHVybiB7Kn0gXG4gICAqIEBtZW1iZXJvZiBEYXRhU2VydmljZVxuICAgKi9cbiAgZmV0Y2hEYXRhKGNvbmZpZzogYXBpQ29uZmlnKSB7XG4gICAgY29uc3Qgc3RyaW5naWZpZWRDb25maWcgPSBKU09OLnN0cmluZ2lmeShjb25maWcpO1xuICAgIGlmICh0aGlzLmNhY2hlZERhdGEuaGFzKHN0cmluZ2lmaWVkQ29uZmlnKSkgcmV0dXJuIG9mKHRoaXMuY2FjaGVkRGF0YS5nZXQoc3RyaW5naWZpZWRDb25maWcpKTtcbiAgICBjb25zdCB7IG1ldGhvZCwgdXJsLCBvcHRpb25zIH0gPSBjb25maWc7XG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0KG1ldGhvZCwgdXJsLCBvcHRpb25zKS5waXBlKFxuICAgICAgdGFwKHJlc3BvbnNlID0+IHtcbiAgICAgICAgdGhpcy5jYWNoZWREYXRhLnNldChzdHJpbmdpZmllZENvbmZpZywgcmVzcG9uc2UpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gbWV0aG9kIGlzIHVzZWQgdG8gZmV0Y2ggdGhlIGdlb0pTT04gZmlsZXMuIENhbiBiZSBvdmVycmlkZGVuIGJ5IHRoZSBjbGllbnQgdG8gdXNlIHRoZSBuZWNlc3NhcnkgZW5kcG9pbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAgICogQHJldHVybiB7Kn0gXG4gICAqIEBtZW1iZXJvZiBEYXRhU2VydmljZVxuICAgKi9cbiAgZmV0Y2hHZW9KU09ORmlsZShwYXRoOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaERhdGEoeyBtZXRob2Q6ICdHRVQnLCB1cmw6IGAvcmVwb3J0cy9mZXRjaC8ke3BhdGh9YCwgb3B0aW9uczoge30gfSlcbiAgICAgIC5waXBlKFxuICAgICAgICBwbHVjaygncmVzdWx0JyksXG4gICAgICAgIHJldHJ5KDIpLFxuICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB0aHJvd0Vycm9yKHsgZXJyb3JUZXh0OiAnRmFpbGVkIHRvIGRvd25sb2FkIGdlb0pTT04gZmlsZS4nIH0pKVxuICAgICAgKTtcbiAgfVxufVxuIl19